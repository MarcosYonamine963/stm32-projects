
Bootloader_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003030  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003380  08003380  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003380  08003380  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003380  08003380  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  080033f4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080033f4  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bc0  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3e  00000000  00000000  00027c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  000296d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000622  00000000  00000000  00029ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b53  00000000  00000000  0002a502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090fd  00000000  00000000  00042055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084203  00000000  00000000  0004b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026d4  00000000  00000000  000cf358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000d1a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003124 	.word	0x08003124

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003124 	.word	0x08003124

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcd0 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a6 	bl	80002a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f850 	bl	8000200 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000160:	f000 f878 	bl	8000254 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader v%d:%d Started!!!\n", BL_Version[0], BL_Version[1]);
 8000164:	4b06      	ldr	r3, [pc, #24]	; (8000180 <main+0x34>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	4619      	mov	r1, r3
 800016a:	4b05      	ldr	r3, [pc, #20]	; (8000180 <main+0x34>)
 800016c:	785b      	ldrb	r3, [r3, #1]
 800016e:	461a      	mov	r2, r3
 8000170:	4804      	ldr	r0, [pc, #16]	; (8000184 <main+0x38>)
 8000172:	f002 f901 	bl	8002378 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Firmware_Update();
 8000176:	f000 f9cb 	bl	8000510 <Firmware_Update>

  // Jump to application
  goto_application();
 800017a:	f000 faeb 	bl	8000754 <goto_application>


  while (1)
 800017e:	e7fe      	b.n	800017e <main+0x32>
 8000180:	20000000 	.word	0x20000000
 8000184:	0800313c 	.word	0x0800313c

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fa34 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2302      	movs	r3, #2
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b2:	2310      	movs	r3, #16
 80001b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b6:	2300      	movs	r3, #0
 80001b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 f9b8 	bl	8001534 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ca:	f000 faf1 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fc26 	bl	8001a38 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f2:	f000 fadd 	bl	80007b0 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <MX_USART1_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <MX_USART1_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_USART1_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_USART1_UART_Init+0x4c>)
 8000238:	f001 fd8c 	bl	8001d54 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 fab5 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000008c 	.word	0x2000008c
 8000250:	40013800 	.word	0x40013800

08000254 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 800025a:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <MX_USART3_UART_Init+0x50>)
 800025c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 8000260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000264:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 800026e:	2200      	movs	r2, #0
 8000270:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 800027a:	220c      	movs	r2, #12
 800027c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800028a:	4805      	ldr	r0, [pc, #20]	; (80002a0 <MX_USART3_UART_Init+0x4c>)
 800028c:	f001 fd62 	bl	8001d54 <HAL_UART_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000296:	f000 fa8b 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	200000d4 	.word	0x200000d4
 80002a4:	40004800 	.word	0x40004800

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002bc:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <MX_GPIO_Init+0x90>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a1d      	ldr	r2, [pc, #116]	; (8000338 <MX_GPIO_Init+0x90>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_GPIO_Init+0x90>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0310 	and.w	r3, r3, #16
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a17      	ldr	r2, [pc, #92]	; (8000338 <MX_GPIO_Init+0x90>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <MX_GPIO_Init+0x90>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	480c      	ldr	r0, [pc, #48]	; (800033c <MX_GPIO_Init+0x94>)
 800030c:	f001 f8e0 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031e:	2302      	movs	r3, #2
 8000320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4619      	mov	r1, r3
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_GPIO_Init+0x94>)
 800032a:	f000 ff4d 	bl	80011c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800032e:	bf00      	nop
 8000330:	3720      	adds	r7, #32
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000
 800033c:	40011000 	.word	0x40011000

08000340 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000348:	1d39      	adds	r1, r7, #4
 800034a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800034e:	2201      	movs	r2, #1
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <__io_putchar+0x20>)
 8000352:	f001 fd4f 	bl	8001df4 <HAL_UART_Transmit>

  return ch;
 8000356:	687b      	ldr	r3, [r7, #4]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000008c 	.word	0x2000008c

08000364 <UART_Write_Loop>:


static int UART_Write_Loop( void )
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
  char tx = 'g';
 800036a:	2367      	movs	r3, #103	; 0x67
 800036c:	71bb      	strb	r3, [r7, #6]
  char rx = '0';
 800036e:	2330      	movs	r3, #48	; 0x30
 8000370:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef ex;
  int ret = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  int count = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]

  while(1)
  {
    //Toggle GPIO
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800037a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037e:	4818      	ldr	r0, [pc, #96]	; (80003e0 <UART_Write_Loop+0x7c>)
 8000380:	f001 f8be 	bl	8001500 <HAL_GPIO_TogglePin>

    HAL_UART_Transmit(&huart3, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000384:	1db9      	adds	r1, r7, #6
 8000386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800038a:	2201      	movs	r2, #1
 800038c:	4815      	ldr	r0, [pc, #84]	; (80003e4 <UART_Write_Loop+0x80>)
 800038e:	f001 fd31 	bl	8001df4 <HAL_UART_Transmit>

    ex = HAL_UART_Receive(&huart3, (uint8_t *)&rx, 1, 10);
 8000392:	1d79      	adds	r1, r7, #5
 8000394:	230a      	movs	r3, #10
 8000396:	2201      	movs	r2, #1
 8000398:	4812      	ldr	r0, [pc, #72]	; (80003e4 <UART_Write_Loop+0x80>)
 800039a:	f001 fdae 	bl	8001efa <HAL_UART_Receive>
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]

    if( ( ex == HAL_OK ) && ( rx == 'r' ) )
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d108      	bne.n	80003ba <UART_Write_Loop+0x56>
 80003a8:	797b      	ldrb	r3, [r7, #5]
 80003aa:	2b72      	cmp	r3, #114	; 0x72
 80003ac:	d105      	bne.n	80003ba <UART_Write_Loop+0x56>
    {
      //received data
      printf("Firmware Update Started\r\n");
 80003ae:	480e      	ldr	r0, [pc, #56]	; (80003e8 <UART_Write_Loop+0x84>)
 80003b0:	f002 f848 	bl	8002444 <puts>
      ret = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60fb      	str	r3, [r7, #12]
      break;
 80003b8:	e00d      	b.n	80003d6 <UART_Write_Loop+0x72>
    }

    if( count == 100 )
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2b64      	cmp	r3, #100	; 0x64
 80003be:	d103      	bne.n	80003c8 <UART_Write_Loop+0x64>
    {
      //received nothing
      printf("No Data Received for Firmware Update\r\n");
 80003c0:	480a      	ldr	r0, [pc, #40]	; (80003ec <UART_Write_Loop+0x88>)
 80003c2:	f002 f83f 	bl	8002444 <puts>
      break;
 80003c6:	e006      	b.n	80003d6 <UART_Write_Loop+0x72>
    }
    count++;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	3301      	adds	r3, #1
 80003cc:	60bb      	str	r3, [r7, #8]
    HAL_Delay(20);              //20ms delay
 80003ce:	2014      	movs	r0, #20
 80003d0:	f000 fbf2 	bl	8000bb8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003d4:	e7d1      	b.n	800037a <UART_Write_Loop+0x16>
  }

  return ret;
 80003d6:	68fb      	ldr	r3, [r7, #12]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40011000 	.word	0x40011000
 80003e4:	200000d4 	.word	0x200000d4
 80003e8:	0800315c 	.word	0x0800315c
 80003ec:	08003178 	.word	0x08003178

080003f0 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	460b      	mov	r3, r1
 80003fa:	807b      	strh	r3, [r7, #2]
 80003fc:	4613      	mov	r3, r2
 80003fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000400:	f000 fd52 	bl	8000ea8 <HAL_FLASH_Unlock>
 8000404:	4603      	mov	r3, r0
 8000406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 800040a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800040e:	2b00      	cmp	r3, #0
 8000410:	d16b      	bne.n	80004ea <write_data_to_flash_app+0xfa>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000412:	787b      	ldrb	r3, [r7, #1]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01a      	beq.n	800044e <write_data_to_flash_app+0x5e>
    {
      printf("Erasing the Flash memory...\r\n");
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <write_data_to_flash_app+0x110>)
 800041a:	f002 f813 	bl	8002444 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <write_data_to_flash_app+0x114>)
 8000424:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbPages       = 47;                     //47 Pages
 8000426:	232f      	movs	r3, #47	; 0x2f
 8000428:	61bb      	str	r3, [r7, #24]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 800042a:	f107 0208 	add.w	r2, r7, #8
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fe1f 	bl	8001078 <HAL_FLASHEx_Erase>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 8000440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000444:	2b00      	cmp	r3, #0
 8000446:	d152      	bne.n	80004ee <write_data_to_flash_app+0xfe>
      {
        break;
      }
      application_write_idx = 0;
 8000448:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <write_data_to_flash_app+0x118>)
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
    }

    for(int i = 0; i < data_len/2; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
 8000452:	e036      	b.n	80004c2 <write_data_to_flash_app+0xd2>
    {
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b21a      	sxth	r2, r3
 8000462:	6a3b      	ldr	r3, [r7, #32]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	3301      	adds	r3, #1
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	440b      	add	r3, r1
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	021b      	lsls	r3, r3, #8
 8000470:	b21b      	sxth	r3, r3
 8000472:	4313      	orrs	r3, r2
 8000474:	b21b      	sxth	r3, r3
 8000476:	83fb      	strh	r3, [r7, #30]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <write_data_to_flash_app+0x118>)
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000480:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 8000484:	4619      	mov	r1, r3
 8000486:	8bfb      	ldrh	r3, [r7, #30]
 8000488:	2200      	movs	r2, #0
 800048a:	461c      	mov	r4, r3
 800048c:	4615      	mov	r5, r2
 800048e:	4622      	mov	r2, r4
 8000490:	462b      	mov	r3, r5
 8000492:	2001      	movs	r0, #1
 8000494:	f000 fc98 	bl	8000dc8 <HAL_FLASH_Program>
 8000498:	4603      	mov	r3, r0
 800049a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                               halfword_data
                             );
      if( ret == HAL_OK )
 800049e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d106      	bne.n	80004b4 <write_data_to_flash_app+0xc4>
      {
        //update the data count
        application_write_idx += 2;
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <write_data_to_flash_app+0x118>)
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	3302      	adds	r3, #2
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <write_data_to_flash_app+0x118>)
 80004b0:	801a      	strh	r2, [r3, #0]
 80004b2:	e003      	b.n	80004bc <write_data_to_flash_app+0xcc>
      }
      else
      {
        printf("Flash Write Error...HALT!!!\r\n");
 80004b4:	4815      	ldr	r0, [pc, #84]	; (800050c <write_data_to_flash_app+0x11c>)
 80004b6:	f001 ffc5 	bl	8002444 <puts>
        break;
 80004ba:	e009      	b.n	80004d0 <write_data_to_flash_app+0xe0>
    for(int i = 0; i < data_len/2; i++)
 80004bc:	6a3b      	ldr	r3, [r7, #32]
 80004be:	3301      	adds	r3, #1
 80004c0:	623b      	str	r3, [r7, #32]
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	085b      	lsrs	r3, r3, #1
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	6a3b      	ldr	r3, [r7, #32]
 80004cc:	4293      	cmp	r3, r2
 80004ce:	dbc1      	blt.n	8000454 <write_data_to_flash_app+0x64>
      }
    }

    if( ret != HAL_OK )
 80004d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10c      	bne.n	80004f2 <write_data_to_flash_app+0x102>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 80004d8:	f000 fd0c 	bl	8000ef4 <HAL_FLASH_Lock>
 80004dc:	4603      	mov	r3, r0
 80004de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 80004e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	e004      	b.n	80004f4 <write_data_to_flash_app+0x104>
      break;
 80004ea:	bf00      	nop
 80004ec:	e002      	b.n	80004f4 <write_data_to_flash_app+0x104>
        break;
 80004ee:	bf00      	nop
 80004f0:	e000      	b.n	80004f4 <write_data_to_flash_app+0x104>
      break;
 80004f2:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 80004f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3728      	adds	r7, #40	; 0x28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000500:	080031a0 	.word	0x080031a0
 8000504:	08004400 	.word	0x08004400
 8000508:	2000011e 	.word	0x2000011e
 800050c:	080031c0 	.word	0x080031c0

08000510 <Firmware_Update>:
/**
  * @brief Check for Firmware Update and update the Firmware
  * @retval None
  */
static void Firmware_Update(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000516:	af00      	add	r7, sp, #0
  uint8_t xx,yy;
  uint8_t x = 'x';
 8000518:	2378      	movs	r3, #120	; 0x78
 800051a:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
  uint8_t y = 'y';
 800051e:	2379      	movs	r3, #121	; 0x79
 8000520:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
  HAL_StatusTypeDef ex = HAL_OK;
 8000524:	2300      	movs	r3, #0
 8000526:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
  uint16_t current_app_size = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
  uint16_t i = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a

  uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 8000536:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800053a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	3304      	adds	r3, #4
 8000544:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f85a 	bl	8002604 <memset>

  do
  {
    if( UART_Write_Loop() != 0 )
 8000550:	f7ff ff08 	bl	8000364 <UART_Write_Loop>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 80e1 	beq.w	800071e <Firmware_Update+0x20e>
    {
      //Sender is ready. Receive the Firmware Size

      // Ask yy
      HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 800055c:	f207 4106 	addw	r1, r7, #1030	; 0x406
 8000560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000564:	2201      	movs	r2, #1
 8000566:	4873      	ldr	r0, [pc, #460]	; (8000734 <Firmware_Update+0x224>)
 8000568:	f001 fc44 	bl	8001df4 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 800056c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8000570:	f241 3388 	movw	r3, #5000	; 0x1388
 8000574:	2201      	movs	r2, #1
 8000576:	486f      	ldr	r0, [pc, #444]	; (8000734 <Firmware_Update+0x224>)
 8000578:	f001 fcbf 	bl	8001efa <HAL_UART_Receive>
 800057c:	4603      	mov	r3, r0
 800057e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
      if( ex != HAL_OK )
 8000582:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000586:	2b00      	cmp	r3, #0
 8000588:	d003      	beq.n	8000592 <Firmware_Update+0x82>
      {
        printf("Get application Size error (yy)...HALT!!!\r\n");
 800058a:	486b      	ldr	r0, [pc, #428]	; (8000738 <Firmware_Update+0x228>)
 800058c:	f001 ff5a 	bl	8002444 <puts>
        break;
 8000590:	e0c5      	b.n	800071e <Firmware_Update+0x20e>
      }

      // Ask xx
      HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 8000592:	f207 4107 	addw	r1, r7, #1031	; 0x407
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059a:	2201      	movs	r2, #1
 800059c:	4865      	ldr	r0, [pc, #404]	; (8000734 <Firmware_Update+0x224>)
 800059e:	f001 fc29 	bl	8001df4 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 80005a2:	f207 4109 	addw	r1, r7, #1033	; 0x409
 80005a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80005aa:	2201      	movs	r2, #1
 80005ac:	4861      	ldr	r0, [pc, #388]	; (8000734 <Firmware_Update+0x224>)
 80005ae:	f001 fca4 	bl	8001efa <HAL_UART_Receive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
      if( ex != HAL_OK )
 80005b8:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d003      	beq.n	80005c8 <Firmware_Update+0xb8>
      {
        printf("Get application Size error(XX)...HALT!!!\r\n");
 80005c0:	485e      	ldr	r0, [pc, #376]	; (800073c <Firmware_Update+0x22c>)
 80005c2:	f001 ff3f 	bl	8002444 <puts>
        break;
 80005c6:	e0aa      	b.n	800071e <Firmware_Update+0x20e>
      }

      application_size = yy | (xx << 8);
 80005c8:	f897 3408 	ldrb.w	r3, [r7, #1032]	; 0x408
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	f897 3409 	ldrb.w	r3, [r7, #1033]	; 0x409
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b21b      	sxth	r3, r3
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <Firmware_Update+0x230>)
 80005de:	801a      	strh	r2, [r3, #0]
      printf("Application Size = %d bytes\r\n", application_size);
 80005e0:	4b57      	ldr	r3, [pc, #348]	; (8000740 <Firmware_Update+0x230>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4857      	ldr	r0, [pc, #348]	; (8000744 <Firmware_Update+0x234>)
 80005e8:	f001 fec6 	bl	8002378 <iprintf>

      while(1)
      {
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 80005ec:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 80005f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f4:	d005      	beq.n	8000602 <Firmware_Update+0xf2>
 80005f6:	4b52      	ldr	r3, [pc, #328]	; (8000740 <Firmware_Update+0x230>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	f8b7 240c 	ldrh.w	r2, [r7, #1036]	; 0x40c
 80005fe:	429a      	cmp	r2, r3
 8000600:	d326      	bcc.n	8000650 <Firmware_Update+0x140>
        {
          printf("Received Block[%d]\r\n", current_app_size/MAX_BLOCK_SIZE);
 8000602:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8000606:	0a9b      	lsrs	r3, r3, #10
 8000608:	b29b      	uxth	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	484e      	ldr	r0, [pc, #312]	; (8000748 <Firmware_Update+0x238>)
 800060e:	f001 feb3 	bl	8002378 <iprintf>

          //write to flash
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 8000612:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8000616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061a:	bf94      	ite	ls
 800061c:	2301      	movls	r3, #1
 800061e:	2300      	movhi	r3, #0
 8000620:	b2da      	uxtb	r2, r3
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fee1 	bl	80003f0 <write_data_to_flash_app>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

          if( ex != HAL_OK )
 8000634:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000638:	2b00      	cmp	r3, #0
 800063a:	d16f      	bne.n	800071c <Firmware_Update+0x20c>
          {
            break;
          }

          //clear the memory
          memset(block, 0,MAX_BLOCK_SIZE);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f001 ffdd 	bl	8002604 <memset>
          i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
        }

        if( current_app_size >= application_size)
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <Firmware_Update+0x230>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	f8b7 240c 	ldrh.w	r2, [r7, #1036]	; 0x40c
 8000658:	429a      	cmp	r2, r3
 800065a:	d303      	bcc.n	8000664 <Firmware_Update+0x154>
        {
          //received all data. exit
          ex = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
          break;
 8000662:	e05c      	b.n	800071e <Firmware_Update+0x20e>
        }

        // Ask yy
        HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 8000664:	f207 4106 	addw	r1, r7, #1030	; 0x406
 8000668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800066c:	2201      	movs	r2, #1
 800066e:	4831      	ldr	r0, [pc, #196]	; (8000734 <Firmware_Update+0x224>)
 8000670:	f001 fbc0 	bl	8001df4 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000674:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8000678:	f241 3388 	movw	r3, #5000	; 0x1388
 800067c:	2201      	movs	r2, #1
 800067e:	482d      	ldr	r0, [pc, #180]	; (8000734 <Firmware_Update+0x224>)
 8000680:	f001 fc3b 	bl	8001efa <HAL_UART_Receive>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
        if( ex != HAL_OK )
 800068a:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <Firmware_Update+0x190>
        {
          printf("Get application data[index:%d] error (yy)...HALT!!!\r\n", i);
 8000692:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8000696:	4619      	mov	r1, r3
 8000698:	482c      	ldr	r0, [pc, #176]	; (800074c <Firmware_Update+0x23c>)
 800069a:	f001 fe6d 	bl	8002378 <iprintf>
          break;
 800069e:	e03e      	b.n	800071e <Firmware_Update+0x20e>
        }

        // Ask xx
        HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 80006a0:	f207 4107 	addw	r1, r7, #1031	; 0x407
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a8:	2201      	movs	r2, #1
 80006aa:	4822      	ldr	r0, [pc, #136]	; (8000734 <Firmware_Update+0x224>)
 80006ac:	f001 fba2 	bl	8001df4 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 80006b0:	f207 4109 	addw	r1, r7, #1033	; 0x409
 80006b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80006b8:	2201      	movs	r2, #1
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <Firmware_Update+0x224>)
 80006bc:	f001 fc1d 	bl	8001efa <HAL_UART_Receive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
        if( ex != HAL_OK )
 80006c6:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <Firmware_Update+0x1cc>
        {
          printf("Get application data[index:%d] error(XX)...HALT!!!\r\n", i);
 80006ce:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 80006d2:	4619      	mov	r1, r3
 80006d4:	481e      	ldr	r0, [pc, #120]	; (8000750 <Firmware_Update+0x240>)
 80006d6:	f001 fe4f 	bl	8002378 <iprintf>
          break;
 80006da:	e020      	b.n	800071e <Firmware_Update+0x20e>
        }

        //--- Save xxyy in block[i]
        block[i++] = yy;
 80006dc:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	f8a7 240a 	strh.w	r2, [r7, #1034]	; 0x40a
 80006e6:	461a      	mov	r2, r3
 80006e8:	f897 1408 	ldrb.w	r1, [r7, #1032]	; 0x408
 80006ec:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80006f0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80006f4:	5499      	strb	r1, [r3, r2]
        block[i++] = xx;
 80006f6:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	f8a7 240a 	strh.w	r2, [r7, #1034]	; 0x40a
 8000700:	461a      	mov	r2, r3
 8000702:	f897 1409 	ldrb.w	r1, [r7, #1033]	; 0x409
 8000706:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800070a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800070e:	5499      	strb	r1, [r3, r2]
        current_app_size += 2;
 8000710:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8000714:	3302      	adds	r3, #2
 8000716:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 800071a:	e767      	b.n	80005ec <Firmware_Update+0xdc>
            break;
 800071c:	bf00      	nop
      }
    }
  }
  while( false );

  if( ex != HAL_OK )
 800071e:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <Firmware_Update+0x218>
  {
    while(1);
 8000726:	e7fe      	b.n	8000726 <Firmware_Update+0x216>
  }
}
 8000728:	bf00      	nop
 800072a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000d4 	.word	0x200000d4
 8000738:	080031e0 	.word	0x080031e0
 800073c:	0800320c 	.word	0x0800320c
 8000740:	2000011c 	.word	0x2000011c
 8000744:	08003238 	.word	0x08003238
 8000748:	08003258 	.word	0x08003258
 800074c:	08003270 	.word	0x08003270
 8000750:	080032a8 	.word	0x080032a8

08000754 <goto_application>:

static void goto_application( void )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application...\n");
 800075a:	4810      	ldr	r0, [pc, #64]	; (800079c <goto_application+0x48>)
 800075c:	f001 fe72 	bl	8002444 <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(ETX_APP_START_ADDRESS + 4U)));
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <goto_application+0x4c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	607b      	str	r3, [r7, #4]

	if( app_reset_handler == (void*)0xFFFFFFFF )
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800076c:	d103      	bne.n	8000776 <goto_application+0x22>
	{
	  printf("Invalid Application... HALT!!!\r\n");
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <goto_application+0x50>)
 8000770:	f001 fe68 	bl	8002444 <puts>
	  while(1);
 8000774:	e7fe      	b.n	8000774 <goto_application+0x20>
	}

	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <goto_application+0x54>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f383 8808 	msr	MSP, r3
}
 8000782:	bf00      	nop

	// Turn OFF the Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <goto_application+0x58>)
 800078c:	f000 fea0 	bl	80014d0 <HAL_GPIO_WritePin>

	app_reset_handler();    //call the app reset handler
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4798      	blx	r3
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	080032e0 	.word	0x080032e0
 80007a0:	08004404 	.word	0x08004404
 80007a4:	08003300 	.word	0x08003300
 80007a8:	08004400 	.word	0x08004400
 80007ac:	40011000 	.word	0x40011000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_MspInit+0x40>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <HAL_MspInit+0x40>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_MspInit+0x40>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x40>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_MspInit+0x40>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_MspInit+0x40>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <HAL_UART_MspInit+0xfc>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d132      	bne.n	8000886 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000820:	4b37      	ldr	r3, [pc, #220]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a36      	ldr	r2, [pc, #216]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b34      	ldr	r3, [pc, #208]	; (8000900 <HAL_UART_MspInit+0x100>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <HAL_UART_MspInit+0x100>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a30      	ldr	r2, [pc, #192]	; (8000900 <HAL_UART_MspInit+0x100>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	4619      	mov	r1, r3
 8000864:	4827      	ldr	r0, [pc, #156]	; (8000904 <HAL_UART_MspInit+0x104>)
 8000866:	f000 fcaf 	bl	80011c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	4619      	mov	r1, r3
 800087e:	4821      	ldr	r0, [pc, #132]	; (8000904 <HAL_UART_MspInit+0x104>)
 8000880:	f000 fca2 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000884:	e036      	b.n	80008f4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <HAL_UART_MspInit+0x108>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d131      	bne.n	80008f4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <HAL_UART_MspInit+0x100>)
 8000896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x100>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_UART_MspInit+0x100>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4619      	mov	r1, r3
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <HAL_UART_MspInit+0x10c>)
 80008d6:	f000 fc77 	bl	80011c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <HAL_UART_MspInit+0x10c>)
 80008f0:	f000 fc6a 	bl	80011c8 <HAL_GPIO_Init>
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800
 8000908:	40004800 	.word	0x40004800
 800090c:	40010c00 	.word	0x40010c00

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 f913 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}

0800095e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e00a      	b.n	8000986 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000970:	f3af 8000 	nop.w
 8000974:	4601      	mov	r1, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	60ba      	str	r2, [r7, #8]
 800097c:	b2ca      	uxtb	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	dbf0      	blt.n	8000970 <_read+0x12>
  }

  return len;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e009      	b.n	80009be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	60ba      	str	r2, [r7, #8]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fcc4 	bl	8000340 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbf1      	blt.n	80009aa <_write+0x12>
  }
  return len;
 80009c6:	687b      	ldr	r3, [r7, #4]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_close>:

int _close(int file)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	605a      	str	r2, [r3, #4]
  return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <_isatty>:

int _isatty(int file)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a0c:	2301      	movs	r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f001 fe1e 	bl	80026a0 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20005000 	.word	0x20005000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	20000120 	.word	0x20000120
 8000a98:	20000298 	.word	0x20000298

08000a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff fff8 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aae:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ac4:	4c09      	ldr	r4, [pc, #36]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fdeb 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fb39 	bl	800014c <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ae4:	08003388 	.word	0x08003388
  ldr r2, =_sbss
 8000ae8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aec:	20000294 	.word	0x20000294

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f92b 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe54 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f935 	bl	8000dae <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 f90b 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000004 	.word	0x20000004
 8000b78:	2000000c 	.word	0x2000000c
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	2000000c 	.word	0x2000000c
 8000ba0:	20000124 	.word	0x20000124

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000124 	.word	0x20000124

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f7ff ff90 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff49 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff5e 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff90 	bl	8000cb8 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5f 	bl	8000c64 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffb0 	bl	8000d1c <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <HAL_FLASH_Program+0xd8>)
 8000de4:	7e1b      	ldrb	r3, [r3, #24]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d101      	bne.n	8000dee <HAL_FLASH_Program+0x26>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e054      	b.n	8000e98 <HAL_FLASH_Program+0xd0>
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <HAL_FLASH_Program+0xd8>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000df8:	f000 f8a8 	bl	8000f4c <FLASH_WaitForLastOperation>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d144      	bne.n	8000e90 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	757b      	strb	r3, [r7, #21]
 8000e10:	e007      	b.n	8000e22 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d102      	bne.n	8000e1e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	757b      	strb	r3, [r7, #21]
 8000e1c:	e001      	b.n	8000e22 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	75bb      	strb	r3, [r7, #22]
 8000e26:	e02d      	b.n	8000e84 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e28:	7dbb      	ldrb	r3, [r7, #22]
 8000e2a:	005a      	lsls	r2, r3, #1
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	eb02 0c03 	add.w	ip, r2, r3
 8000e32:	7dbb      	ldrb	r3, [r7, #22]
 8000e34:	0119      	lsls	r1, r3, #4
 8000e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e3a:	f1c1 0620 	rsb	r6, r1, #32
 8000e3e:	f1a1 0020 	sub.w	r0, r1, #32
 8000e42:	fa22 f401 	lsr.w	r4, r2, r1
 8000e46:	fa03 f606 	lsl.w	r6, r3, r6
 8000e4a:	4334      	orrs	r4, r6
 8000e4c:	fa23 f000 	lsr.w	r0, r3, r0
 8000e50:	4304      	orrs	r4, r0
 8000e52:	fa23 f501 	lsr.w	r5, r3, r1
 8000e56:	b2a3      	uxth	r3, r4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4660      	mov	r0, ip
 8000e5c:	f000 f85a 	bl	8000f14 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e64:	f000 f872 	bl	8000f4c <FLASH_WaitForLastOperation>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_FLASH_Program+0xdc>)
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_FLASH_Program+0xdc>)
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d107      	bne.n	8000e8e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000e7e:	7dbb      	ldrb	r3, [r7, #22]
 8000e80:	3301      	adds	r3, #1
 8000e82:	75bb      	strb	r3, [r7, #22]
 8000e84:	7dba      	ldrb	r2, [r7, #22]
 8000e86:	7d7b      	ldrb	r3, [r7, #21]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3cd      	bcc.n	8000e28 <HAL_FLASH_Program+0x60>
 8000e8c:	e000      	b.n	8000e90 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000e8e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_FLASH_Program+0xd8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]

  return status;
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea0:	20000128 	.word	0x20000128
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_FLASH_Unlock+0x40>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00d      	beq.n	8000eda <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_FLASH_Unlock+0x40>)
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_FLASH_Unlock+0x44>)
 8000ec2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_FLASH_Unlock+0x40>)
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_FLASH_Unlock+0x48>)
 8000ec8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_FLASH_Unlock+0x40>)
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000
 8000eec:	45670123 	.word	0x45670123
 8000ef0:	cdef89ab 	.word	0xcdef89ab

08000ef4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_FLASH_Lock+0x1c>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_FLASH_Lock+0x1c>)
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40022000 	.word	0x40022000

08000f14 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <FLASH_Program_HalfWord+0x30>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <FLASH_Program_HalfWord+0x34>)
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <FLASH_Program_HalfWord+0x34>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	887a      	ldrh	r2, [r7, #2]
 8000f36:	801a      	strh	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000128 	.word	0x20000128
 8000f48:	40022000 	.word	0x40022000

08000f4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fe26 	bl	8000ba4 <HAL_GetTick>
 8000f58:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f5a:	e010      	b.n	8000f7e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f62:	d00c      	beq.n	8000f7e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <FLASH_WaitForLastOperation+0x2e>
 8000f6a:	f7ff fe1b 	bl	8000ba4 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d201      	bcs.n	8000f7e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e025      	b.n	8000fca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <FLASH_WaitForLastOperation+0x88>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1e8      	bne.n	8000f5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <FLASH_WaitForLastOperation+0x88>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <FLASH_WaitForLastOperation+0x88>)
 8000f98:	2220      	movs	r2, #32
 8000f9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <FLASH_WaitForLastOperation+0x88>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10b      	bne.n	8000fc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <FLASH_WaitForLastOperation+0x88>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <FLASH_WaitForLastOperation+0x88>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000fc0:	f000 f80a 	bl	8000fd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d009      	beq.n	8001002 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <FLASH_SetErrorCode+0x9c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <FLASH_SetErrorCode+0x9c>)
 8000ff8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <FLASH_SetErrorCode+0x9c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <FLASH_SetErrorCode+0x9c>)
 8001018:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <FLASH_SetErrorCode+0x9c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <FLASH_SetErrorCode+0x9c>)
 8001038:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <FLASH_SetErrorCode+0x98>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f240 1201 	movw	r2, #257	; 0x101
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <FLASH_SetErrorCode+0x86>
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	61d3      	str	r3, [r2, #28]
}  
 800105c:	e002      	b.n	8001064 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <FLASH_SetErrorCode+0x98>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60d3      	str	r3, [r2, #12]
}  
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40022000 	.word	0x40022000
 8001074:	20000128 	.word	0x20000128

08001078 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_FLASHEx_Erase+0xd0>)
 800108c:	7e1b      	ldrb	r3, [r3, #24]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_FLASHEx_Erase+0x1e>
 8001092:	2302      	movs	r3, #2
 8001094:	e053      	b.n	800113e <HAL_FLASHEx_Erase+0xc6>
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <HAL_FLASHEx_Erase+0xd0>)
 8001098:	2201      	movs	r2, #1
 800109a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d116      	bne.n	80010d2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010a8:	f7ff ff50 	bl	8000f4c <FLASH_WaitForLastOperation>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d141      	bne.n	8001136 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 f84c 	bl	8001150 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010bc:	f7ff ff46 	bl	8000f4c <FLASH_WaitForLastOperation>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_FLASHEx_Erase+0xd4>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	4a20      	ldr	r2, [pc, #128]	; (800114c <HAL_FLASHEx_Erase+0xd4>)
 80010ca:	f023 0304 	bic.w	r3, r3, #4
 80010ce:	6113      	str	r3, [r2, #16]
 80010d0:	e031      	b.n	8001136 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010d6:	f7ff ff39 	bl	8000f4c <FLASH_WaitForLastOperation>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d12a      	bne.n	8001136 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	e019      	b.n	8001124 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f000 f849 	bl	8001188 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010fa:	f7ff ff27 	bl	8000f4c <FLASH_WaitForLastOperation>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_FLASHEx_Erase+0xd4>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <HAL_FLASHEx_Erase+0xd4>)
 8001108:	f023 0302 	bic.w	r3, r3, #2
 800110c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	601a      	str	r2, [r3, #0]
            break;
 800111a:	e00c      	b.n	8001136 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001122:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	029a      	lsls	r2, r3, #10
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	4413      	add	r3, r2
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3dc      	bcc.n	80010f0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <HAL_FLASHEx_Erase+0xd0>)
 8001138:	2200      	movs	r2, #0
 800113a:	761a      	strb	r2, [r3, #24]

  return status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000128 	.word	0x20000128
 800114c:	40022000 	.word	0x40022000

08001150 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <FLASH_MassErase+0x30>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <FLASH_MassErase+0x34>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <FLASH_MassErase+0x34>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <FLASH_MassErase+0x34>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <FLASH_MassErase+0x34>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001174:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000128 	.word	0x20000128
 8001184:	40022000 	.word	0x40022000

08001188 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <FLASH_PageErase+0x38>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <FLASH_PageErase+0x3c>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <FLASH_PageErase+0x3c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <FLASH_PageErase+0x3c>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <FLASH_PageErase+0x3c>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <FLASH_PageErase+0x3c>)
 80011ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000128 	.word	0x20000128
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b08b      	sub	sp, #44	; 0x2c
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	e169      	b.n	80014b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011dc:	2201      	movs	r2, #1
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 8158 	bne.w	80014aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a9a      	ldr	r2, [pc, #616]	; (8001468 <HAL_GPIO_Init+0x2a0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d05e      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001204:	4a98      	ldr	r2, [pc, #608]	; (8001468 <HAL_GPIO_Init+0x2a0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d875      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 800120a:	4a98      	ldr	r2, [pc, #608]	; (800146c <HAL_GPIO_Init+0x2a4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d058      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001210:	4a96      	ldr	r2, [pc, #600]	; (800146c <HAL_GPIO_Init+0x2a4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d86f      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 8001216:	4a96      	ldr	r2, [pc, #600]	; (8001470 <HAL_GPIO_Init+0x2a8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d052      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 800121c:	4a94      	ldr	r2, [pc, #592]	; (8001470 <HAL_GPIO_Init+0x2a8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d869      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 8001222:	4a94      	ldr	r2, [pc, #592]	; (8001474 <HAL_GPIO_Init+0x2ac>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d04c      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001228:	4a92      	ldr	r2, [pc, #584]	; (8001474 <HAL_GPIO_Init+0x2ac>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d863      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 800122e:	4a92      	ldr	r2, [pc, #584]	; (8001478 <HAL_GPIO_Init+0x2b0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d046      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
 8001234:	4a90      	ldr	r2, [pc, #576]	; (8001478 <HAL_GPIO_Init+0x2b0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d85d      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 800123a:	2b12      	cmp	r3, #18
 800123c:	d82a      	bhi.n	8001294 <HAL_GPIO_Init+0xcc>
 800123e:	2b12      	cmp	r3, #18
 8001240:	d859      	bhi.n	80012f6 <HAL_GPIO_Init+0x12e>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <HAL_GPIO_Init+0x80>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	080012c3 	.word	0x080012c3
 800124c:	0800129d 	.word	0x0800129d
 8001250:	080012af 	.word	0x080012af
 8001254:	080012f1 	.word	0x080012f1
 8001258:	080012f7 	.word	0x080012f7
 800125c:	080012f7 	.word	0x080012f7
 8001260:	080012f7 	.word	0x080012f7
 8001264:	080012f7 	.word	0x080012f7
 8001268:	080012f7 	.word	0x080012f7
 800126c:	080012f7 	.word	0x080012f7
 8001270:	080012f7 	.word	0x080012f7
 8001274:	080012f7 	.word	0x080012f7
 8001278:	080012f7 	.word	0x080012f7
 800127c:	080012f7 	.word	0x080012f7
 8001280:	080012f7 	.word	0x080012f7
 8001284:	080012f7 	.word	0x080012f7
 8001288:	080012f7 	.word	0x080012f7
 800128c:	080012a5 	.word	0x080012a5
 8001290:	080012b9 	.word	0x080012b9
 8001294:	4a79      	ldr	r2, [pc, #484]	; (800147c <HAL_GPIO_Init+0x2b4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800129a:	e02c      	b.n	80012f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e029      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	3304      	adds	r3, #4
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e024      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	3308      	adds	r3, #8
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e01f      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	330c      	adds	r3, #12
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e01a      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ca:	2304      	movs	r3, #4
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e013      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d105      	bne.n	80012e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	611a      	str	r2, [r3, #16]
          break;
 80012e2:	e009      	b.n	80012f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	615a      	str	r2, [r3, #20]
          break;
 80012ee:	e003      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x130>
          break;
 80012f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2bff      	cmp	r3, #255	; 0xff
 80012fc:	d801      	bhi.n	8001302 <HAL_GPIO_Init+0x13a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	e001      	b.n	8001306 <HAL_GPIO_Init+0x13e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3304      	adds	r3, #4
 8001306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d802      	bhi.n	8001314 <HAL_GPIO_Init+0x14c>
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x152>
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	3b08      	subs	r3, #8
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	210f      	movs	r1, #15
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	6a39      	ldr	r1, [r7, #32]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	431a      	orrs	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80b1 	beq.w	80014aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x2b8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x2b8>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001360:	4a48      	ldr	r2, [pc, #288]	; (8001484 <HAL_GPIO_Init+0x2bc>)
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a40      	ldr	r2, [pc, #256]	; (8001488 <HAL_GPIO_Init+0x2c0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d013      	beq.n	80013b4 <HAL_GPIO_Init+0x1ec>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3f      	ldr	r2, [pc, #252]	; (800148c <HAL_GPIO_Init+0x2c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d00d      	beq.n	80013b0 <HAL_GPIO_Init+0x1e8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a3e      	ldr	r2, [pc, #248]	; (8001490 <HAL_GPIO_Init+0x2c8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d007      	beq.n	80013ac <HAL_GPIO_Init+0x1e4>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <HAL_GPIO_Init+0x2cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_GPIO_Init+0x1e0>
 80013a4:	2303      	movs	r3, #3
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e004      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e002      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <HAL_GPIO_Init+0x1ee>
 80013b4:	2300      	movs	r3, #0
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	f002 0203 	and.w	r2, r2, #3
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4093      	lsls	r3, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c6:	492f      	ldr	r1, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x2bc>)
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	492c      	ldr	r1, [pc, #176]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	4928      	ldr	r1, [pc, #160]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4922      	ldr	r1, [pc, #136]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	60cb      	str	r3, [r1, #12]
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	43db      	mvns	r3, r3
 800141e:	491e      	ldr	r1, [pc, #120]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 8001420:	4013      	ands	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4918      	ldr	r1, [pc, #96]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4914      	ldr	r1, [pc, #80]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d021      	beq.n	800149c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	490e      	ldr	r1, [pc, #56]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e021      	b.n	80014aa <HAL_GPIO_Init+0x2e2>
 8001466:	bf00      	nop
 8001468:	10320000 	.word	0x10320000
 800146c:	10310000 	.word	0x10310000
 8001470:	10220000 	.word	0x10220000
 8001474:	10210000 	.word	0x10210000
 8001478:	10120000 	.word	0x10120000
 800147c:	10110000 	.word	0x10110000
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000
 8001488:	40010800 	.word	0x40010800
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40011000 	.word	0x40011000
 8001494:	40011400 	.word	0x40011400
 8001498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_GPIO_Init+0x304>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4909      	ldr	r1, [pc, #36]	; (80014cc <HAL_GPIO_Init+0x304>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f47f ae8e 	bne.w	80011dc <HAL_GPIO_Init+0x14>
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	372c      	adds	r7, #44	; 0x2c
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e0:	787b      	ldrb	r3, [r7, #1]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ec:	e003      	b.n	80014f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	041a      	lsls	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43d9      	mvns	r1, r3
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	400b      	ands	r3, r1
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	611a      	str	r2, [r3, #16]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
	...

08001534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e272      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8087 	beq.w	8001662 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001554:	4b92      	ldr	r3, [pc, #584]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b04      	cmp	r3, #4
 800155e:	d00c      	beq.n	800157a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001560:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d112      	bne.n	8001592 <HAL_RCC_OscConfig+0x5e>
 800156c:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d10b      	bne.n	8001592 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d06c      	beq.n	8001660 <HAL_RCC_OscConfig+0x12c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d168      	bne.n	8001660 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e24c      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x76>
 800159c:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a7f      	ldr	r2, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e02e      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x98>
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a7a      	ldr	r2, [pc, #488]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a77      	ldr	r2, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01d      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0xbc>
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a71      	ldr	r2, [pc, #452]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015f0:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a6a      	ldr	r2, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fac8 	bl	8000ba4 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fac4 	bl	8000ba4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e200      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0xe4>
 8001636:	e014      	b.n	8001662 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fab4 	bl	8000ba4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fab0 	bl	8000ba4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1ec      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x10c>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d063      	beq.n	8001736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166e:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b08      	cmp	r3, #8
 8001684:	d11c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x18c>
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d116      	bne.n	80016c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x176>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e1c0      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4939      	ldr	r1, [pc, #228]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	e03a      	b.n	8001736 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x270>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa69 	bl	8000ba4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fa65 	bl	8000ba4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1a1      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4927      	ldr	r1, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_RCC_OscConfig+0x270>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fa48 	bl	8000ba4 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fa44 	bl	8000ba4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e180      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d03a      	beq.n	80017b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d019      	beq.n	800177e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_RCC_OscConfig+0x274>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa28 	bl	8000ba4 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fa24 	bl	8000ba4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e160      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f000 face 	bl	8001d18 <RCC_Delay>
 800177c:	e01c      	b.n	80017b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_RCC_OscConfig+0x274>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fa0e 	bl	8000ba4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178a:	e00f      	b.n	80017ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fa0a 	bl	8000ba4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d908      	bls.n	80017ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e146      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	42420000 	.word	0x42420000
 80017a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	4b92      	ldr	r3, [pc, #584]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e9      	bne.n	800178c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a6 	beq.w	8001912 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a87      	ldr	r2, [pc, #540]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b82      	ldr	r3, [pc, #520]	; (80019fc <HAL_RCC_OscConfig+0x4c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x4c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x4c8>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff f9cb 	bl	8000ba4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff f9c7 	bl	8000ba4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e103      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4c8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x312>
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e02d      	b.n	80018a2 <HAL_RCC_OscConfig+0x36e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x334>
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	e01c      	b.n	80018a2 <HAL_RCC_OscConfig+0x36e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x356>
 8001870:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x36e>
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6213      	str	r3, [r2, #32]
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f97b 	bl	8000ba4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff f977 	bl	8000ba4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0b1      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_RCC_OscConfig+0x37e>
 80018d4:	e014      	b.n	8001900 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f965 	bl	8000ba4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f961 	bl	8000ba4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e09b      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d105      	bne.n	8001912 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8087 	beq.w	8001a2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d061      	beq.n	80019ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d146      	bne.n	80019be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f935 	bl	8000ba4 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f931 	bl	8000ba4 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e06d      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d108      	bne.n	8001978 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4921      	ldr	r1, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a19      	ldr	r1, [r3, #32]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	430b      	orrs	r3, r1
 800198a:	491b      	ldr	r1, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f905 	bl	8000ba4 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f901 	bl	8000ba4 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e03d      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x46a>
 80019bc:	e035      	b.n	8001a2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_OscConfig+0x4cc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8ee 	bl	8000ba4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f8ea 	bl	8000ba4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e026      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x498>
 80019ea:	e01e      	b.n	8001a2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e019      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
 8001a00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_OscConfig+0x500>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0d0      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d910      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	4965      	ldr	r1, [pc, #404]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ab6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	494d      	ldr	r1, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d040      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d115      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e073      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e06b      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4936      	ldr	r1, [pc, #216]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f83c 	bl	8000ba4 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f838 	bl	8000ba4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e053      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d210      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0207 	bic.w	r2, r3, #7
 8001b6e:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e032      	b.n	8001bee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bc6:	f000 f821 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	490a      	ldr	r1, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1cc>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1d0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ff9a 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08003320 	.word	0x08003320
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x30>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3a:	e027      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c3e:	613b      	str	r3, [r7, #16]
      break;
 8001c40:	e027      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d010      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	0c5b      	lsrs	r3, r3, #17
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6e:	fb03 f202 	mul.w	r2, r3, r2
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e004      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	613b      	str	r3, [r7, #16]
      break;
 8001c8a:	e002      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c8e:	613b      	str	r3, [r7, #16]
      break;
 8001c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c92:	693b      	ldr	r3, [r7, #16]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	08003338 	.word	0x08003338
 8001cac:	08003348 	.word	0x08003348
 8001cb0:	003d0900 	.word	0x003d0900

08001cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff fff2 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08003330 	.word	0x08003330

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003330 	.word	0x08003330

08001d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <RCC_Delay+0x34>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <RCC_Delay+0x38>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0a5b      	lsrs	r3, r3, #9
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d34:	bf00      	nop
  }
  while (Delay --);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	60fa      	str	r2, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f9      	bne.n	8001d34 <RCC_Delay+0x1c>
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	10624dd3 	.word	0x10624dd3

08001d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e042      	b.n	8001dec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fd40 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9af 	bl	80020fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d16d      	bne.n	8001ef0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_UART_Transmit+0x2c>
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e066      	b.n	8001ef2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2221      	movs	r2, #33	; 0x21
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e32:	f7fe feb7 	bl	8000ba4 <HAL_GetTick>
 8001e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	88fa      	ldrh	r2, [r7, #6]
 8001e3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4c:	d108      	bne.n	8001e60 <HAL_UART_Transmit+0x6c>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e003      	b.n	8001e68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e68:	e02a      	b.n	8001ec0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f8d2 	bl	800201e <UART_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e036      	b.n	8001ef2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10b      	bne.n	8001ea2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	e007      	b.n	8001eb2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1cf      	bne.n	8001e6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2140      	movs	r1, #64	; 0x40
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f8a2 	bl	800201e <UART_WaitOnFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e006      	b.n	8001ef2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b08a      	sub	sp, #40	; 0x28
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d17c      	bne.n	8002014 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_UART_Receive+0x2c>
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e075      	b.n	8002016 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2222      	movs	r2, #34	; 0x22
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fe31 	bl	8000ba4 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f58:	d108      	bne.n	8001f6c <HAL_UART_Receive+0x72>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e003      	b.n	8001f74 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f74:	e043      	b.n	8001ffe <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2120      	movs	r1, #32
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f84c 	bl	800201e <UART_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e042      	b.n	8002016 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	3302      	adds	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	e01f      	b.n	8001ff0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb8:	d007      	beq.n	8001fca <HAL_UART_Receive+0xd0>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_UART_Receive+0xde>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	e008      	b.n	8001fea <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1b6      	bne.n	8001f76 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e000      	b.n	8002016 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002014:	2302      	movs	r3, #2
  }
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202e:	e050      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002036:	d04c      	beq.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <UART_WaitOnFlagUntilTimeout+0x30>
 800203e:	f7fe fdb1 	bl	8000ba4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800204a:	429a      	cmp	r2, r3
 800204c:	d241      	bcs.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	330c      	adds	r3, #12
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	e853 3f00 	ldrex	r3, [r3]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206e:	637a      	str	r2, [r7, #52]	; 0x34
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002076:	e841 2300 	strex	r3, r2, [r1]
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e5      	bne.n	800204e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3314      	adds	r3, #20
 8002088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	e853 3f00 	ldrex	r3, [r3]
 8002090:	613b      	str	r3, [r7, #16]
   return(result);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	63bb      	str	r3, [r7, #56]	; 0x38
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3314      	adds	r3, #20
 80020a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a2:	623a      	str	r2, [r7, #32]
 80020a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a6:	69f9      	ldr	r1, [r7, #28]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	e841 2300 	strex	r3, r2, [r1]
 80020ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e5      	bne.n	8002082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e00f      	b.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d09f      	beq.n	8002030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3740      	adds	r7, #64	; 0x40
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002136:	f023 030c 	bic.w	r3, r3, #12
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	430b      	orrs	r3, r1
 8002142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2c      	ldr	r2, [pc, #176]	; (8002210 <UART_SetConfig+0x114>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d103      	bne.n	800216c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002164:	f7ff fdc4 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	e002      	b.n	8002172 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800216c:	f7ff fdac 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8002170:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4a22      	ldr	r2, [pc, #136]	; (8002214 <UART_SetConfig+0x118>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	0119      	lsls	r1, r3, #4
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	441a      	add	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <UART_SetConfig+0x118>)
 80021aa:	fba3 0302 	umull	r0, r3, r3, r2
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2064      	movs	r0, #100	; 0x64
 80021b2:	fb00 f303 	mul.w	r3, r0, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	3332      	adds	r3, #50	; 0x32
 80021bc:	4a15      	ldr	r2, [pc, #84]	; (8002214 <UART_SetConfig+0x118>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	4419      	add	r1, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	009a      	lsls	r2, r3, #2
 80021d4:	441a      	add	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <UART_SetConfig+0x118>)
 80021e2:	fba3 0302 	umull	r0, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2064      	movs	r0, #100	; 0x64
 80021ea:	fb00 f303 	mul.w	r3, r0, r3
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	3332      	adds	r3, #50	; 0x32
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <UART_SetConfig+0x118>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	f003 020f 	and.w	r2, r3, #15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	440a      	add	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40013800 	.word	0x40013800
 8002214:	51eb851f 	.word	0x51eb851f

08002218 <std>:
 8002218:	2300      	movs	r3, #0
 800221a:	b510      	push	{r4, lr}
 800221c:	4604      	mov	r4, r0
 800221e:	e9c0 3300 	strd	r3, r3, [r0]
 8002222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002226:	6083      	str	r3, [r0, #8]
 8002228:	8181      	strh	r1, [r0, #12]
 800222a:	6643      	str	r3, [r0, #100]	; 0x64
 800222c:	81c2      	strh	r2, [r0, #14]
 800222e:	6183      	str	r3, [r0, #24]
 8002230:	4619      	mov	r1, r3
 8002232:	2208      	movs	r2, #8
 8002234:	305c      	adds	r0, #92	; 0x5c
 8002236:	f000 f9e5 	bl	8002604 <memset>
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <std+0x38>)
 800223c:	6224      	str	r4, [r4, #32]
 800223e:	6263      	str	r3, [r4, #36]	; 0x24
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <std+0x3c>)
 8002242:	62a3      	str	r3, [r4, #40]	; 0x28
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <std+0x40>)
 8002246:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <std+0x44>)
 800224a:	6323      	str	r3, [r4, #48]	; 0x30
 800224c:	bd10      	pop	{r4, pc}
 800224e:	bf00      	nop
 8002250:	08002455 	.word	0x08002455
 8002254:	08002477 	.word	0x08002477
 8002258:	080024af 	.word	0x080024af
 800225c:	080024d3 	.word	0x080024d3

08002260 <stdio_exit_handler>:
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <stdio_exit_handler+0xc>)
 8002262:	4903      	ldr	r1, [pc, #12]	; (8002270 <stdio_exit_handler+0x10>)
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <stdio_exit_handler+0x14>)
 8002266:	f000 b869 	b.w	800233c <_fwalk_sglue>
 800226a:	bf00      	nop
 800226c:	20000010 	.word	0x20000010
 8002270:	08002f91 	.word	0x08002f91
 8002274:	2000001c 	.word	0x2000001c

08002278 <cleanup_stdio>:
 8002278:	6841      	ldr	r1, [r0, #4]
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <cleanup_stdio+0x34>)
 800227c:	b510      	push	{r4, lr}
 800227e:	4299      	cmp	r1, r3
 8002280:	4604      	mov	r4, r0
 8002282:	d001      	beq.n	8002288 <cleanup_stdio+0x10>
 8002284:	f000 fe84 	bl	8002f90 <_fflush_r>
 8002288:	68a1      	ldr	r1, [r4, #8]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <cleanup_stdio+0x38>)
 800228c:	4299      	cmp	r1, r3
 800228e:	d002      	beq.n	8002296 <cleanup_stdio+0x1e>
 8002290:	4620      	mov	r0, r4
 8002292:	f000 fe7d 	bl	8002f90 <_fflush_r>
 8002296:	68e1      	ldr	r1, [r4, #12]
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <cleanup_stdio+0x3c>)
 800229a:	4299      	cmp	r1, r3
 800229c:	d004      	beq.n	80022a8 <cleanup_stdio+0x30>
 800229e:	4620      	mov	r0, r4
 80022a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a4:	f000 be74 	b.w	8002f90 <_fflush_r>
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	bf00      	nop
 80022ac:	20000148 	.word	0x20000148
 80022b0:	200001b0 	.word	0x200001b0
 80022b4:	20000218 	.word	0x20000218

080022b8 <global_stdio_init.part.0>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <global_stdio_init.part.0+0x30>)
 80022bc:	4c0b      	ldr	r4, [pc, #44]	; (80022ec <global_stdio_init.part.0+0x34>)
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <global_stdio_init.part.0+0x38>)
 80022c0:	4620      	mov	r0, r4
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	2104      	movs	r1, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	f7ff ffa6 	bl	8002218 <std>
 80022cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80022d0:	2201      	movs	r2, #1
 80022d2:	2109      	movs	r1, #9
 80022d4:	f7ff ffa0 	bl	8002218 <std>
 80022d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80022dc:	2202      	movs	r2, #2
 80022de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022e2:	2112      	movs	r1, #18
 80022e4:	f7ff bf98 	b.w	8002218 <std>
 80022e8:	20000280 	.word	0x20000280
 80022ec:	20000148 	.word	0x20000148
 80022f0:	08002261 	.word	0x08002261

080022f4 <__sfp_lock_acquire>:
 80022f4:	4801      	ldr	r0, [pc, #4]	; (80022fc <__sfp_lock_acquire+0x8>)
 80022f6:	f000 b9fd 	b.w	80026f4 <__retarget_lock_acquire_recursive>
 80022fa:	bf00      	nop
 80022fc:	20000289 	.word	0x20000289

08002300 <__sfp_lock_release>:
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <__sfp_lock_release+0x8>)
 8002302:	f000 b9f8 	b.w	80026f6 <__retarget_lock_release_recursive>
 8002306:	bf00      	nop
 8002308:	20000289 	.word	0x20000289

0800230c <__sinit>:
 800230c:	b510      	push	{r4, lr}
 800230e:	4604      	mov	r4, r0
 8002310:	f7ff fff0 	bl	80022f4 <__sfp_lock_acquire>
 8002314:	6a23      	ldr	r3, [r4, #32]
 8002316:	b11b      	cbz	r3, 8002320 <__sinit+0x14>
 8002318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800231c:	f7ff bff0 	b.w	8002300 <__sfp_lock_release>
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__sinit+0x28>)
 8002322:	6223      	str	r3, [r4, #32]
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__sinit+0x2c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f5      	bne.n	8002318 <__sinit+0xc>
 800232c:	f7ff ffc4 	bl	80022b8 <global_stdio_init.part.0>
 8002330:	e7f2      	b.n	8002318 <__sinit+0xc>
 8002332:	bf00      	nop
 8002334:	08002279 	.word	0x08002279
 8002338:	20000280 	.word	0x20000280

0800233c <_fwalk_sglue>:
 800233c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002340:	4607      	mov	r7, r0
 8002342:	4688      	mov	r8, r1
 8002344:	4614      	mov	r4, r2
 8002346:	2600      	movs	r6, #0
 8002348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800234c:	f1b9 0901 	subs.w	r9, r9, #1
 8002350:	d505      	bpl.n	800235e <_fwalk_sglue+0x22>
 8002352:	6824      	ldr	r4, [r4, #0]
 8002354:	2c00      	cmp	r4, #0
 8002356:	d1f7      	bne.n	8002348 <_fwalk_sglue+0xc>
 8002358:	4630      	mov	r0, r6
 800235a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800235e:	89ab      	ldrh	r3, [r5, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d907      	bls.n	8002374 <_fwalk_sglue+0x38>
 8002364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002368:	3301      	adds	r3, #1
 800236a:	d003      	beq.n	8002374 <_fwalk_sglue+0x38>
 800236c:	4629      	mov	r1, r5
 800236e:	4638      	mov	r0, r7
 8002370:	47c0      	blx	r8
 8002372:	4306      	orrs	r6, r0
 8002374:	3568      	adds	r5, #104	; 0x68
 8002376:	e7e9      	b.n	800234c <_fwalk_sglue+0x10>

08002378 <iprintf>:
 8002378:	b40f      	push	{r0, r1, r2, r3}
 800237a:	b507      	push	{r0, r1, r2, lr}
 800237c:	4906      	ldr	r1, [pc, #24]	; (8002398 <iprintf+0x20>)
 800237e:	ab04      	add	r3, sp, #16
 8002380:	6808      	ldr	r0, [r1, #0]
 8002382:	f853 2b04 	ldr.w	r2, [r3], #4
 8002386:	6881      	ldr	r1, [r0, #8]
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f000 fad1 	bl	8002930 <_vfiprintf_r>
 800238e:	b003      	add	sp, #12
 8002390:	f85d eb04 	ldr.w	lr, [sp], #4
 8002394:	b004      	add	sp, #16
 8002396:	4770      	bx	lr
 8002398:	20000068 	.word	0x20000068

0800239c <_puts_r>:
 800239c:	6a03      	ldr	r3, [r0, #32]
 800239e:	b570      	push	{r4, r5, r6, lr}
 80023a0:	4605      	mov	r5, r0
 80023a2:	460e      	mov	r6, r1
 80023a4:	6884      	ldr	r4, [r0, #8]
 80023a6:	b90b      	cbnz	r3, 80023ac <_puts_r+0x10>
 80023a8:	f7ff ffb0 	bl	800230c <__sinit>
 80023ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023ae:	07db      	lsls	r3, r3, #31
 80023b0:	d405      	bmi.n	80023be <_puts_r+0x22>
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	0598      	lsls	r0, r3, #22
 80023b6:	d402      	bmi.n	80023be <_puts_r+0x22>
 80023b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ba:	f000 f99b 	bl	80026f4 <__retarget_lock_acquire_recursive>
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	0719      	lsls	r1, r3, #28
 80023c2:	d513      	bpl.n	80023ec <_puts_r+0x50>
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	b18b      	cbz	r3, 80023ec <_puts_r+0x50>
 80023c8:	3e01      	subs	r6, #1
 80023ca:	68a3      	ldr	r3, [r4, #8]
 80023cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60a3      	str	r3, [r4, #8]
 80023d4:	b9e9      	cbnz	r1, 8002412 <_puts_r+0x76>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da2e      	bge.n	8002438 <_puts_r+0x9c>
 80023da:	4622      	mov	r2, r4
 80023dc:	210a      	movs	r1, #10
 80023de:	4628      	mov	r0, r5
 80023e0:	f000 f87b 	bl	80024da <__swbuf_r>
 80023e4:	3001      	adds	r0, #1
 80023e6:	d007      	beq.n	80023f8 <_puts_r+0x5c>
 80023e8:	250a      	movs	r5, #10
 80023ea:	e007      	b.n	80023fc <_puts_r+0x60>
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f000 f8b0 	bl	8002554 <__swsetup_r>
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d0e7      	beq.n	80023c8 <_puts_r+0x2c>
 80023f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80023fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023fe:	07da      	lsls	r2, r3, #31
 8002400:	d405      	bmi.n	800240e <_puts_r+0x72>
 8002402:	89a3      	ldrh	r3, [r4, #12]
 8002404:	059b      	lsls	r3, r3, #22
 8002406:	d402      	bmi.n	800240e <_puts_r+0x72>
 8002408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800240a:	f000 f974 	bl	80026f6 <__retarget_lock_release_recursive>
 800240e:	4628      	mov	r0, r5
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	2b00      	cmp	r3, #0
 8002414:	da04      	bge.n	8002420 <_puts_r+0x84>
 8002416:	69a2      	ldr	r2, [r4, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	dc06      	bgt.n	800242a <_puts_r+0x8e>
 800241c:	290a      	cmp	r1, #10
 800241e:	d004      	beq.n	800242a <_puts_r+0x8e>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	6022      	str	r2, [r4, #0]
 8002426:	7019      	strb	r1, [r3, #0]
 8002428:	e7cf      	b.n	80023ca <_puts_r+0x2e>
 800242a:	4622      	mov	r2, r4
 800242c:	4628      	mov	r0, r5
 800242e:	f000 f854 	bl	80024da <__swbuf_r>
 8002432:	3001      	adds	r0, #1
 8002434:	d1c9      	bne.n	80023ca <_puts_r+0x2e>
 8002436:	e7df      	b.n	80023f8 <_puts_r+0x5c>
 8002438:	250a      	movs	r5, #10
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	6022      	str	r2, [r4, #0]
 8002440:	701d      	strb	r5, [r3, #0]
 8002442:	e7db      	b.n	80023fc <_puts_r+0x60>

08002444 <puts>:
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <puts+0xc>)
 8002446:	4601      	mov	r1, r0
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f7ff bfa7 	b.w	800239c <_puts_r>
 800244e:	bf00      	nop
 8002450:	20000068 	.word	0x20000068

08002454 <__sread>:
 8002454:	b510      	push	{r4, lr}
 8002456:	460c      	mov	r4, r1
 8002458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245c:	f000 f8fc 	bl	8002658 <_read_r>
 8002460:	2800      	cmp	r0, #0
 8002462:	bfab      	itete	ge
 8002464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002466:	89a3      	ldrhlt	r3, [r4, #12]
 8002468:	181b      	addge	r3, r3, r0
 800246a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800246e:	bfac      	ite	ge
 8002470:	6563      	strge	r3, [r4, #84]	; 0x54
 8002472:	81a3      	strhlt	r3, [r4, #12]
 8002474:	bd10      	pop	{r4, pc}

08002476 <__swrite>:
 8002476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247a:	461f      	mov	r7, r3
 800247c:	898b      	ldrh	r3, [r1, #12]
 800247e:	4605      	mov	r5, r0
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	460c      	mov	r4, r1
 8002484:	4616      	mov	r6, r2
 8002486:	d505      	bpl.n	8002494 <__swrite+0x1e>
 8002488:	2302      	movs	r3, #2
 800248a:	2200      	movs	r2, #0
 800248c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002490:	f000 f8d0 	bl	8002634 <_lseek_r>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	4632      	mov	r2, r6
 8002498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249c:	81a3      	strh	r3, [r4, #12]
 800249e:	4628      	mov	r0, r5
 80024a0:	463b      	mov	r3, r7
 80024a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024aa:	f000 b8e7 	b.w	800267c <_write_r>

080024ae <__sseek>:
 80024ae:	b510      	push	{r4, lr}
 80024b0:	460c      	mov	r4, r1
 80024b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b6:	f000 f8bd 	bl	8002634 <_lseek_r>
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	89a3      	ldrh	r3, [r4, #12]
 80024be:	bf15      	itete	ne
 80024c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80024c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ca:	81a3      	strheq	r3, [r4, #12]
 80024cc:	bf18      	it	ne
 80024ce:	81a3      	strhne	r3, [r4, #12]
 80024d0:	bd10      	pop	{r4, pc}

080024d2 <__sclose>:
 80024d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d6:	f000 b89d 	b.w	8002614 <_close_r>

080024da <__swbuf_r>:
 80024da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024dc:	460e      	mov	r6, r1
 80024de:	4614      	mov	r4, r2
 80024e0:	4605      	mov	r5, r0
 80024e2:	b118      	cbz	r0, 80024ec <__swbuf_r+0x12>
 80024e4:	6a03      	ldr	r3, [r0, #32]
 80024e6:	b90b      	cbnz	r3, 80024ec <__swbuf_r+0x12>
 80024e8:	f7ff ff10 	bl	800230c <__sinit>
 80024ec:	69a3      	ldr	r3, [r4, #24]
 80024ee:	60a3      	str	r3, [r4, #8]
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	071a      	lsls	r2, r3, #28
 80024f4:	d525      	bpl.n	8002542 <__swbuf_r+0x68>
 80024f6:	6923      	ldr	r3, [r4, #16]
 80024f8:	b31b      	cbz	r3, 8002542 <__swbuf_r+0x68>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	6922      	ldr	r2, [r4, #16]
 80024fe:	b2f6      	uxtb	r6, r6
 8002500:	1a98      	subs	r0, r3, r2
 8002502:	6963      	ldr	r3, [r4, #20]
 8002504:	4637      	mov	r7, r6
 8002506:	4283      	cmp	r3, r0
 8002508:	dc04      	bgt.n	8002514 <__swbuf_r+0x3a>
 800250a:	4621      	mov	r1, r4
 800250c:	4628      	mov	r0, r5
 800250e:	f000 fd3f 	bl	8002f90 <_fflush_r>
 8002512:	b9e0      	cbnz	r0, 800254e <__swbuf_r+0x74>
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	3b01      	subs	r3, #1
 8002518:	60a3      	str	r3, [r4, #8]
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	6022      	str	r2, [r4, #0]
 8002520:	701e      	strb	r6, [r3, #0]
 8002522:	6962      	ldr	r2, [r4, #20]
 8002524:	1c43      	adds	r3, r0, #1
 8002526:	429a      	cmp	r2, r3
 8002528:	d004      	beq.n	8002534 <__swbuf_r+0x5a>
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	07db      	lsls	r3, r3, #31
 800252e:	d506      	bpl.n	800253e <__swbuf_r+0x64>
 8002530:	2e0a      	cmp	r6, #10
 8002532:	d104      	bne.n	800253e <__swbuf_r+0x64>
 8002534:	4621      	mov	r1, r4
 8002536:	4628      	mov	r0, r5
 8002538:	f000 fd2a 	bl	8002f90 <_fflush_r>
 800253c:	b938      	cbnz	r0, 800254e <__swbuf_r+0x74>
 800253e:	4638      	mov	r0, r7
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002542:	4621      	mov	r1, r4
 8002544:	4628      	mov	r0, r5
 8002546:	f000 f805 	bl	8002554 <__swsetup_r>
 800254a:	2800      	cmp	r0, #0
 800254c:	d0d5      	beq.n	80024fa <__swbuf_r+0x20>
 800254e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002552:	e7f4      	b.n	800253e <__swbuf_r+0x64>

08002554 <__swsetup_r>:
 8002554:	b538      	push	{r3, r4, r5, lr}
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <__swsetup_r+0xac>)
 8002558:	4605      	mov	r5, r0
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	460c      	mov	r4, r1
 800255e:	b118      	cbz	r0, 8002568 <__swsetup_r+0x14>
 8002560:	6a03      	ldr	r3, [r0, #32]
 8002562:	b90b      	cbnz	r3, 8002568 <__swsetup_r+0x14>
 8002564:	f7ff fed2 	bl	800230c <__sinit>
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800256e:	0718      	lsls	r0, r3, #28
 8002570:	d422      	bmi.n	80025b8 <__swsetup_r+0x64>
 8002572:	06d9      	lsls	r1, r3, #27
 8002574:	d407      	bmi.n	8002586 <__swsetup_r+0x32>
 8002576:	2309      	movs	r3, #9
 8002578:	602b      	str	r3, [r5, #0]
 800257a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800257e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	e034      	b.n	80025f0 <__swsetup_r+0x9c>
 8002586:	0758      	lsls	r0, r3, #29
 8002588:	d512      	bpl.n	80025b0 <__swsetup_r+0x5c>
 800258a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800258c:	b141      	cbz	r1, 80025a0 <__swsetup_r+0x4c>
 800258e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002592:	4299      	cmp	r1, r3
 8002594:	d002      	beq.n	800259c <__swsetup_r+0x48>
 8002596:	4628      	mov	r0, r5
 8002598:	f000 f8ae 	bl	80026f8 <_free_r>
 800259c:	2300      	movs	r3, #0
 800259e:	6363      	str	r3, [r4, #52]	; 0x34
 80025a0:	89a3      	ldrh	r3, [r4, #12]
 80025a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025a6:	81a3      	strh	r3, [r4, #12]
 80025a8:	2300      	movs	r3, #0
 80025aa:	6063      	str	r3, [r4, #4]
 80025ac:	6923      	ldr	r3, [r4, #16]
 80025ae:	6023      	str	r3, [r4, #0]
 80025b0:	89a3      	ldrh	r3, [r4, #12]
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	81a3      	strh	r3, [r4, #12]
 80025b8:	6923      	ldr	r3, [r4, #16]
 80025ba:	b94b      	cbnz	r3, 80025d0 <__swsetup_r+0x7c>
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c6:	d003      	beq.n	80025d0 <__swsetup_r+0x7c>
 80025c8:	4621      	mov	r1, r4
 80025ca:	4628      	mov	r0, r5
 80025cc:	f000 fd2d 	bl	800302a <__smakebuf_r>
 80025d0:	89a0      	ldrh	r0, [r4, #12]
 80025d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025d6:	f010 0301 	ands.w	r3, r0, #1
 80025da:	d00a      	beq.n	80025f2 <__swsetup_r+0x9e>
 80025dc:	2300      	movs	r3, #0
 80025de:	60a3      	str	r3, [r4, #8]
 80025e0:	6963      	ldr	r3, [r4, #20]
 80025e2:	425b      	negs	r3, r3
 80025e4:	61a3      	str	r3, [r4, #24]
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	b943      	cbnz	r3, 80025fc <__swsetup_r+0xa8>
 80025ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025ee:	d1c4      	bne.n	800257a <__swsetup_r+0x26>
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
 80025f2:	0781      	lsls	r1, r0, #30
 80025f4:	bf58      	it	pl
 80025f6:	6963      	ldrpl	r3, [r4, #20]
 80025f8:	60a3      	str	r3, [r4, #8]
 80025fa:	e7f4      	b.n	80025e6 <__swsetup_r+0x92>
 80025fc:	2000      	movs	r0, #0
 80025fe:	e7f7      	b.n	80025f0 <__swsetup_r+0x9c>
 8002600:	20000068 	.word	0x20000068

08002604 <memset>:
 8002604:	4603      	mov	r3, r0
 8002606:	4402      	add	r2, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_close_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	2300      	movs	r3, #0
 8002618:	4d05      	ldr	r5, [pc, #20]	; (8002630 <_close_r+0x1c>)
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	f7fe f9d6 	bl	80009d0 <_close>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d102      	bne.n	800262e <_close_r+0x1a>
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	b103      	cbz	r3, 800262e <_close_r+0x1a>
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	bd38      	pop	{r3, r4, r5, pc}
 8002630:	20000284 	.word	0x20000284

08002634 <_lseek_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4604      	mov	r4, r0
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	2200      	movs	r2, #0
 800263e:	4d05      	ldr	r5, [pc, #20]	; (8002654 <_lseek_r+0x20>)
 8002640:	602a      	str	r2, [r5, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f7fe f9e8 	bl	8000a18 <_lseek>
 8002648:	1c43      	adds	r3, r0, #1
 800264a:	d102      	bne.n	8002652 <_lseek_r+0x1e>
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	b103      	cbz	r3, 8002652 <_lseek_r+0x1e>
 8002650:	6023      	str	r3, [r4, #0]
 8002652:	bd38      	pop	{r3, r4, r5, pc}
 8002654:	20000284 	.word	0x20000284

08002658 <_read_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	4604      	mov	r4, r0
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	2200      	movs	r2, #0
 8002662:	4d05      	ldr	r5, [pc, #20]	; (8002678 <_read_r+0x20>)
 8002664:	602a      	str	r2, [r5, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	f7fe f979 	bl	800095e <_read>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d102      	bne.n	8002676 <_read_r+0x1e>
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	b103      	cbz	r3, 8002676 <_read_r+0x1e>
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	20000284 	.word	0x20000284

0800267c <_write_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4604      	mov	r4, r0
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	2200      	movs	r2, #0
 8002686:	4d05      	ldr	r5, [pc, #20]	; (800269c <_write_r+0x20>)
 8002688:	602a      	str	r2, [r5, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f7fe f984 	bl	8000998 <_write>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_write_r+0x1e>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_write_r+0x1e>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	20000284 	.word	0x20000284

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000068 	.word	0x20000068

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2600      	movs	r6, #0
 80026b0:	4d0c      	ldr	r5, [pc, #48]	; (80026e4 <__libc_init_array+0x38>)
 80026b2:	4c0d      	ldr	r4, [pc, #52]	; (80026e8 <__libc_init_array+0x3c>)
 80026b4:	1b64      	subs	r4, r4, r5
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	f000 fd32 	bl	8003124 <_init>
 80026c0:	2600      	movs	r6, #0
 80026c2:	4d0a      	ldr	r5, [pc, #40]	; (80026ec <__libc_init_array+0x40>)
 80026c4:	4c0a      	ldr	r4, [pc, #40]	; (80026f0 <__libc_init_array+0x44>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	08003380 	.word	0x08003380
 80026e8:	08003380 	.word	0x08003380
 80026ec:	08003380 	.word	0x08003380
 80026f0:	08003384 	.word	0x08003384

080026f4 <__retarget_lock_acquire_recursive>:
 80026f4:	4770      	bx	lr

080026f6 <__retarget_lock_release_recursive>:
 80026f6:	4770      	bx	lr

080026f8 <_free_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	4605      	mov	r5, r0
 80026fc:	2900      	cmp	r1, #0
 80026fe:	d040      	beq.n	8002782 <_free_r+0x8a>
 8002700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002704:	1f0c      	subs	r4, r1, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	bfb8      	it	lt
 800270a:	18e4      	addlt	r4, r4, r3
 800270c:	f000 f8dc 	bl	80028c8 <__malloc_lock>
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <_free_r+0x8c>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	b933      	cbnz	r3, 8002724 <_free_r+0x2c>
 8002716:	6063      	str	r3, [r4, #4]
 8002718:	6014      	str	r4, [r2, #0]
 800271a:	4628      	mov	r0, r5
 800271c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002720:	f000 b8d8 	b.w	80028d4 <__malloc_unlock>
 8002724:	42a3      	cmp	r3, r4
 8002726:	d908      	bls.n	800273a <_free_r+0x42>
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	1821      	adds	r1, r4, r0
 800272c:	428b      	cmp	r3, r1
 800272e:	bf01      	itttt	eq
 8002730:	6819      	ldreq	r1, [r3, #0]
 8002732:	685b      	ldreq	r3, [r3, #4]
 8002734:	1809      	addeq	r1, r1, r0
 8002736:	6021      	streq	r1, [r4, #0]
 8002738:	e7ed      	b.n	8002716 <_free_r+0x1e>
 800273a:	461a      	mov	r2, r3
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	b10b      	cbz	r3, 8002744 <_free_r+0x4c>
 8002740:	42a3      	cmp	r3, r4
 8002742:	d9fa      	bls.n	800273a <_free_r+0x42>
 8002744:	6811      	ldr	r1, [r2, #0]
 8002746:	1850      	adds	r0, r2, r1
 8002748:	42a0      	cmp	r0, r4
 800274a:	d10b      	bne.n	8002764 <_free_r+0x6c>
 800274c:	6820      	ldr	r0, [r4, #0]
 800274e:	4401      	add	r1, r0
 8002750:	1850      	adds	r0, r2, r1
 8002752:	4283      	cmp	r3, r0
 8002754:	6011      	str	r1, [r2, #0]
 8002756:	d1e0      	bne.n	800271a <_free_r+0x22>
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4408      	add	r0, r1
 800275e:	6010      	str	r0, [r2, #0]
 8002760:	6053      	str	r3, [r2, #4]
 8002762:	e7da      	b.n	800271a <_free_r+0x22>
 8002764:	d902      	bls.n	800276c <_free_r+0x74>
 8002766:	230c      	movs	r3, #12
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	e7d6      	b.n	800271a <_free_r+0x22>
 800276c:	6820      	ldr	r0, [r4, #0]
 800276e:	1821      	adds	r1, r4, r0
 8002770:	428b      	cmp	r3, r1
 8002772:	bf01      	itttt	eq
 8002774:	6819      	ldreq	r1, [r3, #0]
 8002776:	685b      	ldreq	r3, [r3, #4]
 8002778:	1809      	addeq	r1, r1, r0
 800277a:	6021      	streq	r1, [r4, #0]
 800277c:	6063      	str	r3, [r4, #4]
 800277e:	6054      	str	r4, [r2, #4]
 8002780:	e7cb      	b.n	800271a <_free_r+0x22>
 8002782:	bd38      	pop	{r3, r4, r5, pc}
 8002784:	2000028c 	.word	0x2000028c

08002788 <sbrk_aligned>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4e0e      	ldr	r6, [pc, #56]	; (80027c4 <sbrk_aligned+0x3c>)
 800278c:	460c      	mov	r4, r1
 800278e:	6831      	ldr	r1, [r6, #0]
 8002790:	4605      	mov	r5, r0
 8002792:	b911      	cbnz	r1, 800279a <sbrk_aligned+0x12>
 8002794:	f000 fca8 	bl	80030e8 <_sbrk_r>
 8002798:	6030      	str	r0, [r6, #0]
 800279a:	4621      	mov	r1, r4
 800279c:	4628      	mov	r0, r5
 800279e:	f000 fca3 	bl	80030e8 <_sbrk_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	d00a      	beq.n	80027bc <sbrk_aligned+0x34>
 80027a6:	1cc4      	adds	r4, r0, #3
 80027a8:	f024 0403 	bic.w	r4, r4, #3
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d007      	beq.n	80027c0 <sbrk_aligned+0x38>
 80027b0:	1a21      	subs	r1, r4, r0
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 fc98 	bl	80030e8 <_sbrk_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d101      	bne.n	80027c0 <sbrk_aligned+0x38>
 80027bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027c0:	4620      	mov	r0, r4
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	20000290 	.word	0x20000290

080027c8 <_malloc_r>:
 80027c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027cc:	1ccd      	adds	r5, r1, #3
 80027ce:	f025 0503 	bic.w	r5, r5, #3
 80027d2:	3508      	adds	r5, #8
 80027d4:	2d0c      	cmp	r5, #12
 80027d6:	bf38      	it	cc
 80027d8:	250c      	movcc	r5, #12
 80027da:	2d00      	cmp	r5, #0
 80027dc:	4607      	mov	r7, r0
 80027de:	db01      	blt.n	80027e4 <_malloc_r+0x1c>
 80027e0:	42a9      	cmp	r1, r5
 80027e2:	d905      	bls.n	80027f0 <_malloc_r+0x28>
 80027e4:	230c      	movs	r3, #12
 80027e6:	2600      	movs	r6, #0
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4630      	mov	r0, r6
 80027ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028c4 <_malloc_r+0xfc>
 80027f4:	f000 f868 	bl	80028c8 <__malloc_lock>
 80027f8:	f8d8 3000 	ldr.w	r3, [r8]
 80027fc:	461c      	mov	r4, r3
 80027fe:	bb5c      	cbnz	r4, 8002858 <_malloc_r+0x90>
 8002800:	4629      	mov	r1, r5
 8002802:	4638      	mov	r0, r7
 8002804:	f7ff ffc0 	bl	8002788 <sbrk_aligned>
 8002808:	1c43      	adds	r3, r0, #1
 800280a:	4604      	mov	r4, r0
 800280c:	d155      	bne.n	80028ba <_malloc_r+0xf2>
 800280e:	f8d8 4000 	ldr.w	r4, [r8]
 8002812:	4626      	mov	r6, r4
 8002814:	2e00      	cmp	r6, #0
 8002816:	d145      	bne.n	80028a4 <_malloc_r+0xdc>
 8002818:	2c00      	cmp	r4, #0
 800281a:	d048      	beq.n	80028ae <_malloc_r+0xe6>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	4631      	mov	r1, r6
 8002820:	4638      	mov	r0, r7
 8002822:	eb04 0903 	add.w	r9, r4, r3
 8002826:	f000 fc5f 	bl	80030e8 <_sbrk_r>
 800282a:	4581      	cmp	r9, r0
 800282c:	d13f      	bne.n	80028ae <_malloc_r+0xe6>
 800282e:	6821      	ldr	r1, [r4, #0]
 8002830:	4638      	mov	r0, r7
 8002832:	1a6d      	subs	r5, r5, r1
 8002834:	4629      	mov	r1, r5
 8002836:	f7ff ffa7 	bl	8002788 <sbrk_aligned>
 800283a:	3001      	adds	r0, #1
 800283c:	d037      	beq.n	80028ae <_malloc_r+0xe6>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	442b      	add	r3, r5
 8002842:	6023      	str	r3, [r4, #0]
 8002844:	f8d8 3000 	ldr.w	r3, [r8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d038      	beq.n	80028be <_malloc_r+0xf6>
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	42a2      	cmp	r2, r4
 8002850:	d12b      	bne.n	80028aa <_malloc_r+0xe2>
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e00f      	b.n	8002878 <_malloc_r+0xb0>
 8002858:	6822      	ldr	r2, [r4, #0]
 800285a:	1b52      	subs	r2, r2, r5
 800285c:	d41f      	bmi.n	800289e <_malloc_r+0xd6>
 800285e:	2a0b      	cmp	r2, #11
 8002860:	d917      	bls.n	8002892 <_malloc_r+0xca>
 8002862:	1961      	adds	r1, r4, r5
 8002864:	42a3      	cmp	r3, r4
 8002866:	6025      	str	r5, [r4, #0]
 8002868:	bf18      	it	ne
 800286a:	6059      	strne	r1, [r3, #4]
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	bf08      	it	eq
 8002870:	f8c8 1000 	streq.w	r1, [r8]
 8002874:	5162      	str	r2, [r4, r5]
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	4638      	mov	r0, r7
 800287a:	f104 060b 	add.w	r6, r4, #11
 800287e:	f000 f829 	bl	80028d4 <__malloc_unlock>
 8002882:	f026 0607 	bic.w	r6, r6, #7
 8002886:	1d23      	adds	r3, r4, #4
 8002888:	1af2      	subs	r2, r6, r3
 800288a:	d0ae      	beq.n	80027ea <_malloc_r+0x22>
 800288c:	1b9b      	subs	r3, r3, r6
 800288e:	50a3      	str	r3, [r4, r2]
 8002890:	e7ab      	b.n	80027ea <_malloc_r+0x22>
 8002892:	42a3      	cmp	r3, r4
 8002894:	6862      	ldr	r2, [r4, #4]
 8002896:	d1dd      	bne.n	8002854 <_malloc_r+0x8c>
 8002898:	f8c8 2000 	str.w	r2, [r8]
 800289c:	e7ec      	b.n	8002878 <_malloc_r+0xb0>
 800289e:	4623      	mov	r3, r4
 80028a0:	6864      	ldr	r4, [r4, #4]
 80028a2:	e7ac      	b.n	80027fe <_malloc_r+0x36>
 80028a4:	4634      	mov	r4, r6
 80028a6:	6876      	ldr	r6, [r6, #4]
 80028a8:	e7b4      	b.n	8002814 <_malloc_r+0x4c>
 80028aa:	4613      	mov	r3, r2
 80028ac:	e7cc      	b.n	8002848 <_malloc_r+0x80>
 80028ae:	230c      	movs	r3, #12
 80028b0:	4638      	mov	r0, r7
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	f000 f80e 	bl	80028d4 <__malloc_unlock>
 80028b8:	e797      	b.n	80027ea <_malloc_r+0x22>
 80028ba:	6025      	str	r5, [r4, #0]
 80028bc:	e7dc      	b.n	8002878 <_malloc_r+0xb0>
 80028be:	605b      	str	r3, [r3, #4]
 80028c0:	deff      	udf	#255	; 0xff
 80028c2:	bf00      	nop
 80028c4:	2000028c 	.word	0x2000028c

080028c8 <__malloc_lock>:
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <__malloc_lock+0x8>)
 80028ca:	f7ff bf13 	b.w	80026f4 <__retarget_lock_acquire_recursive>
 80028ce:	bf00      	nop
 80028d0:	20000288 	.word	0x20000288

080028d4 <__malloc_unlock>:
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <__malloc_unlock+0x8>)
 80028d6:	f7ff bf0e 	b.w	80026f6 <__retarget_lock_release_recursive>
 80028da:	bf00      	nop
 80028dc:	20000288 	.word	0x20000288

080028e0 <__sfputc_r>:
 80028e0:	6893      	ldr	r3, [r2, #8]
 80028e2:	b410      	push	{r4}
 80028e4:	3b01      	subs	r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	6093      	str	r3, [r2, #8]
 80028ea:	da07      	bge.n	80028fc <__sfputc_r+0x1c>
 80028ec:	6994      	ldr	r4, [r2, #24]
 80028ee:	42a3      	cmp	r3, r4
 80028f0:	db01      	blt.n	80028f6 <__sfputc_r+0x16>
 80028f2:	290a      	cmp	r1, #10
 80028f4:	d102      	bne.n	80028fc <__sfputc_r+0x1c>
 80028f6:	bc10      	pop	{r4}
 80028f8:	f7ff bdef 	b.w	80024da <__swbuf_r>
 80028fc:	6813      	ldr	r3, [r2, #0]
 80028fe:	1c58      	adds	r0, r3, #1
 8002900:	6010      	str	r0, [r2, #0]
 8002902:	7019      	strb	r1, [r3, #0]
 8002904:	4608      	mov	r0, r1
 8002906:	bc10      	pop	{r4}
 8002908:	4770      	bx	lr

0800290a <__sfputs_r>:
 800290a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290c:	4606      	mov	r6, r0
 800290e:	460f      	mov	r7, r1
 8002910:	4614      	mov	r4, r2
 8002912:	18d5      	adds	r5, r2, r3
 8002914:	42ac      	cmp	r4, r5
 8002916:	d101      	bne.n	800291c <__sfputs_r+0x12>
 8002918:	2000      	movs	r0, #0
 800291a:	e007      	b.n	800292c <__sfputs_r+0x22>
 800291c:	463a      	mov	r2, r7
 800291e:	4630      	mov	r0, r6
 8002920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002924:	f7ff ffdc 	bl	80028e0 <__sfputc_r>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	d1f3      	bne.n	8002914 <__sfputs_r+0xa>
 800292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002930 <_vfiprintf_r>:
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	460d      	mov	r5, r1
 8002936:	4614      	mov	r4, r2
 8002938:	4698      	mov	r8, r3
 800293a:	4606      	mov	r6, r0
 800293c:	b09d      	sub	sp, #116	; 0x74
 800293e:	b118      	cbz	r0, 8002948 <_vfiprintf_r+0x18>
 8002940:	6a03      	ldr	r3, [r0, #32]
 8002942:	b90b      	cbnz	r3, 8002948 <_vfiprintf_r+0x18>
 8002944:	f7ff fce2 	bl	800230c <__sinit>
 8002948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800294a:	07d9      	lsls	r1, r3, #31
 800294c:	d405      	bmi.n	800295a <_vfiprintf_r+0x2a>
 800294e:	89ab      	ldrh	r3, [r5, #12]
 8002950:	059a      	lsls	r2, r3, #22
 8002952:	d402      	bmi.n	800295a <_vfiprintf_r+0x2a>
 8002954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002956:	f7ff fecd 	bl	80026f4 <__retarget_lock_acquire_recursive>
 800295a:	89ab      	ldrh	r3, [r5, #12]
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	d501      	bpl.n	8002964 <_vfiprintf_r+0x34>
 8002960:	692b      	ldr	r3, [r5, #16]
 8002962:	b99b      	cbnz	r3, 800298c <_vfiprintf_r+0x5c>
 8002964:	4629      	mov	r1, r5
 8002966:	4630      	mov	r0, r6
 8002968:	f7ff fdf4 	bl	8002554 <__swsetup_r>
 800296c:	b170      	cbz	r0, 800298c <_vfiprintf_r+0x5c>
 800296e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002970:	07dc      	lsls	r4, r3, #31
 8002972:	d504      	bpl.n	800297e <_vfiprintf_r+0x4e>
 8002974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002978:	b01d      	add	sp, #116	; 0x74
 800297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800297e:	89ab      	ldrh	r3, [r5, #12]
 8002980:	0598      	lsls	r0, r3, #22
 8002982:	d4f7      	bmi.n	8002974 <_vfiprintf_r+0x44>
 8002984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002986:	f7ff feb6 	bl	80026f6 <__retarget_lock_release_recursive>
 800298a:	e7f3      	b.n	8002974 <_vfiprintf_r+0x44>
 800298c:	2300      	movs	r3, #0
 800298e:	9309      	str	r3, [sp, #36]	; 0x24
 8002990:	2320      	movs	r3, #32
 8002992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002996:	2330      	movs	r3, #48	; 0x30
 8002998:	f04f 0901 	mov.w	r9, #1
 800299c:	f8cd 800c 	str.w	r8, [sp, #12]
 80029a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002b50 <_vfiprintf_r+0x220>
 80029a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029a8:	4623      	mov	r3, r4
 80029aa:	469a      	mov	sl, r3
 80029ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029b0:	b10a      	cbz	r2, 80029b6 <_vfiprintf_r+0x86>
 80029b2:	2a25      	cmp	r2, #37	; 0x25
 80029b4:	d1f9      	bne.n	80029aa <_vfiprintf_r+0x7a>
 80029b6:	ebba 0b04 	subs.w	fp, sl, r4
 80029ba:	d00b      	beq.n	80029d4 <_vfiprintf_r+0xa4>
 80029bc:	465b      	mov	r3, fp
 80029be:	4622      	mov	r2, r4
 80029c0:	4629      	mov	r1, r5
 80029c2:	4630      	mov	r0, r6
 80029c4:	f7ff ffa1 	bl	800290a <__sfputs_r>
 80029c8:	3001      	adds	r0, #1
 80029ca:	f000 80a9 	beq.w	8002b20 <_vfiprintf_r+0x1f0>
 80029ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029d0:	445a      	add	r2, fp
 80029d2:	9209      	str	r2, [sp, #36]	; 0x24
 80029d4:	f89a 3000 	ldrb.w	r3, [sl]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a1 	beq.w	8002b20 <_vfiprintf_r+0x1f0>
 80029de:	2300      	movs	r3, #0
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029e8:	f10a 0a01 	add.w	sl, sl, #1
 80029ec:	9304      	str	r3, [sp, #16]
 80029ee:	9307      	str	r3, [sp, #28]
 80029f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029f4:	931a      	str	r3, [sp, #104]	; 0x68
 80029f6:	4654      	mov	r4, sl
 80029f8:	2205      	movs	r2, #5
 80029fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029fe:	4854      	ldr	r0, [pc, #336]	; (8002b50 <_vfiprintf_r+0x220>)
 8002a00:	f000 fb82 	bl	8003108 <memchr>
 8002a04:	9a04      	ldr	r2, [sp, #16]
 8002a06:	b9d8      	cbnz	r0, 8002a40 <_vfiprintf_r+0x110>
 8002a08:	06d1      	lsls	r1, r2, #27
 8002a0a:	bf44      	itt	mi
 8002a0c:	2320      	movmi	r3, #32
 8002a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a12:	0713      	lsls	r3, r2, #28
 8002a14:	bf44      	itt	mi
 8002a16:	232b      	movmi	r3, #43	; 0x2b
 8002a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a20:	2b2a      	cmp	r3, #42	; 0x2a
 8002a22:	d015      	beq.n	8002a50 <_vfiprintf_r+0x120>
 8002a24:	4654      	mov	r4, sl
 8002a26:	2000      	movs	r0, #0
 8002a28:	f04f 0c0a 	mov.w	ip, #10
 8002a2c:	9a07      	ldr	r2, [sp, #28]
 8002a2e:	4621      	mov	r1, r4
 8002a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a34:	3b30      	subs	r3, #48	; 0x30
 8002a36:	2b09      	cmp	r3, #9
 8002a38:	d94d      	bls.n	8002ad6 <_vfiprintf_r+0x1a6>
 8002a3a:	b1b0      	cbz	r0, 8002a6a <_vfiprintf_r+0x13a>
 8002a3c:	9207      	str	r2, [sp, #28]
 8002a3e:	e014      	b.n	8002a6a <_vfiprintf_r+0x13a>
 8002a40:	eba0 0308 	sub.w	r3, r0, r8
 8002a44:	fa09 f303 	lsl.w	r3, r9, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	46a2      	mov	sl, r4
 8002a4c:	9304      	str	r3, [sp, #16]
 8002a4e:	e7d2      	b.n	80029f6 <_vfiprintf_r+0xc6>
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	1d19      	adds	r1, r3, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	9103      	str	r1, [sp, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bfbb      	ittet	lt
 8002a5c:	425b      	neglt	r3, r3
 8002a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a62:	9307      	strge	r3, [sp, #28]
 8002a64:	9307      	strlt	r3, [sp, #28]
 8002a66:	bfb8      	it	lt
 8002a68:	9204      	strlt	r2, [sp, #16]
 8002a6a:	7823      	ldrb	r3, [r4, #0]
 8002a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a6e:	d10c      	bne.n	8002a8a <_vfiprintf_r+0x15a>
 8002a70:	7863      	ldrb	r3, [r4, #1]
 8002a72:	2b2a      	cmp	r3, #42	; 0x2a
 8002a74:	d134      	bne.n	8002ae0 <_vfiprintf_r+0x1b0>
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	3402      	adds	r4, #2
 8002a7a:	1d1a      	adds	r2, r3, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	9203      	str	r2, [sp, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bfb8      	it	lt
 8002a84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a88:	9305      	str	r3, [sp, #20]
 8002a8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b54 <_vfiprintf_r+0x224>
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4650      	mov	r0, sl
 8002a92:	7821      	ldrb	r1, [r4, #0]
 8002a94:	f000 fb38 	bl	8003108 <memchr>
 8002a98:	b138      	cbz	r0, 8002aaa <_vfiprintf_r+0x17a>
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	9b04      	ldr	r3, [sp, #16]
 8002a9e:	eba0 000a 	sub.w	r0, r0, sl
 8002aa2:	4082      	lsls	r2, r0
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	3401      	adds	r4, #1
 8002aa8:	9304      	str	r3, [sp, #16]
 8002aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aae:	2206      	movs	r2, #6
 8002ab0:	4829      	ldr	r0, [pc, #164]	; (8002b58 <_vfiprintf_r+0x228>)
 8002ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ab6:	f000 fb27 	bl	8003108 <memchr>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d03f      	beq.n	8002b3e <_vfiprintf_r+0x20e>
 8002abe:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <_vfiprintf_r+0x22c>)
 8002ac0:	bb1b      	cbnz	r3, 8002b0a <_vfiprintf_r+0x1da>
 8002ac2:	9b03      	ldr	r3, [sp, #12]
 8002ac4:	3307      	adds	r3, #7
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	3308      	adds	r3, #8
 8002acc:	9303      	str	r3, [sp, #12]
 8002ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad0:	443b      	add	r3, r7
 8002ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad4:	e768      	b.n	80029a8 <_vfiprintf_r+0x78>
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	2001      	movs	r0, #1
 8002ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ade:	e7a6      	b.n	8002a2e <_vfiprintf_r+0xfe>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f04f 0c0a 	mov.w	ip, #10
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	3401      	adds	r4, #1
 8002aea:	9305      	str	r3, [sp, #20]
 8002aec:	4620      	mov	r0, r4
 8002aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002af2:	3a30      	subs	r2, #48	; 0x30
 8002af4:	2a09      	cmp	r2, #9
 8002af6:	d903      	bls.n	8002b00 <_vfiprintf_r+0x1d0>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0c6      	beq.n	8002a8a <_vfiprintf_r+0x15a>
 8002afc:	9105      	str	r1, [sp, #20]
 8002afe:	e7c4      	b.n	8002a8a <_vfiprintf_r+0x15a>
 8002b00:	4604      	mov	r4, r0
 8002b02:	2301      	movs	r3, #1
 8002b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b08:	e7f0      	b.n	8002aec <_vfiprintf_r+0x1bc>
 8002b0a:	ab03      	add	r3, sp, #12
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	462a      	mov	r2, r5
 8002b10:	4630      	mov	r0, r6
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <_vfiprintf_r+0x230>)
 8002b14:	a904      	add	r1, sp, #16
 8002b16:	f3af 8000 	nop.w
 8002b1a:	4607      	mov	r7, r0
 8002b1c:	1c78      	adds	r0, r7, #1
 8002b1e:	d1d6      	bne.n	8002ace <_vfiprintf_r+0x19e>
 8002b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b22:	07d9      	lsls	r1, r3, #31
 8002b24:	d405      	bmi.n	8002b32 <_vfiprintf_r+0x202>
 8002b26:	89ab      	ldrh	r3, [r5, #12]
 8002b28:	059a      	lsls	r2, r3, #22
 8002b2a:	d402      	bmi.n	8002b32 <_vfiprintf_r+0x202>
 8002b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b2e:	f7ff fde2 	bl	80026f6 <__retarget_lock_release_recursive>
 8002b32:	89ab      	ldrh	r3, [r5, #12]
 8002b34:	065b      	lsls	r3, r3, #25
 8002b36:	f53f af1d 	bmi.w	8002974 <_vfiprintf_r+0x44>
 8002b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b3c:	e71c      	b.n	8002978 <_vfiprintf_r+0x48>
 8002b3e:	ab03      	add	r3, sp, #12
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	462a      	mov	r2, r5
 8002b44:	4630      	mov	r0, r6
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <_vfiprintf_r+0x230>)
 8002b48:	a904      	add	r1, sp, #16
 8002b4a:	f000 f87d 	bl	8002c48 <_printf_i>
 8002b4e:	e7e4      	b.n	8002b1a <_vfiprintf_r+0x1ea>
 8002b50:	0800334a 	.word	0x0800334a
 8002b54:	08003350 	.word	0x08003350
 8002b58:	08003354 	.word	0x08003354
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	0800290b 	.word	0x0800290b

08002b64 <_printf_common>:
 8002b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b68:	4616      	mov	r6, r2
 8002b6a:	4699      	mov	r9, r3
 8002b6c:	688a      	ldr	r2, [r1, #8]
 8002b6e:	690b      	ldr	r3, [r1, #16]
 8002b70:	4607      	mov	r7, r0
 8002b72:	4293      	cmp	r3, r2
 8002b74:	bfb8      	it	lt
 8002b76:	4613      	movlt	r3, r2
 8002b78:	6033      	str	r3, [r6, #0]
 8002b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b7e:	460c      	mov	r4, r1
 8002b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b84:	b10a      	cbz	r2, 8002b8a <_printf_common+0x26>
 8002b86:	3301      	adds	r3, #1
 8002b88:	6033      	str	r3, [r6, #0]
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	0699      	lsls	r1, r3, #26
 8002b8e:	bf42      	ittt	mi
 8002b90:	6833      	ldrmi	r3, [r6, #0]
 8002b92:	3302      	addmi	r3, #2
 8002b94:	6033      	strmi	r3, [r6, #0]
 8002b96:	6825      	ldr	r5, [r4, #0]
 8002b98:	f015 0506 	ands.w	r5, r5, #6
 8002b9c:	d106      	bne.n	8002bac <_printf_common+0x48>
 8002b9e:	f104 0a19 	add.w	sl, r4, #25
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	6832      	ldr	r2, [r6, #0]
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	42ab      	cmp	r3, r5
 8002baa:	dc2b      	bgt.n	8002c04 <_printf_common+0xa0>
 8002bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bb0:	1e13      	subs	r3, r2, #0
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	bf18      	it	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	0692      	lsls	r2, r2, #26
 8002bba:	d430      	bmi.n	8002c1e <_printf_common+0xba>
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bc4:	47c0      	blx	r8
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	d023      	beq.n	8002c12 <_printf_common+0xae>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	6922      	ldr	r2, [r4, #16]
 8002bce:	f003 0306 	and.w	r3, r3, #6
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf14      	ite	ne
 8002bd6:	2500      	movne	r5, #0
 8002bd8:	6833      	ldreq	r3, [r6, #0]
 8002bda:	f04f 0600 	mov.w	r6, #0
 8002bde:	bf08      	it	eq
 8002be0:	68e5      	ldreq	r5, [r4, #12]
 8002be2:	f104 041a 	add.w	r4, r4, #26
 8002be6:	bf08      	it	eq
 8002be8:	1aed      	subeq	r5, r5, r3
 8002bea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002bee:	bf08      	it	eq
 8002bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bfc4      	itt	gt
 8002bf8:	1a9b      	subgt	r3, r3, r2
 8002bfa:	18ed      	addgt	r5, r5, r3
 8002bfc:	42b5      	cmp	r5, r6
 8002bfe:	d11a      	bne.n	8002c36 <_printf_common+0xd2>
 8002c00:	2000      	movs	r0, #0
 8002c02:	e008      	b.n	8002c16 <_printf_common+0xb2>
 8002c04:	2301      	movs	r3, #1
 8002c06:	4652      	mov	r2, sl
 8002c08:	4649      	mov	r1, r9
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	47c0      	blx	r8
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d103      	bne.n	8002c1a <_printf_common+0xb6>
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1a:	3501      	adds	r5, #1
 8002c1c:	e7c1      	b.n	8002ba2 <_printf_common+0x3e>
 8002c1e:	2030      	movs	r0, #48	; 0x30
 8002c20:	18e1      	adds	r1, r4, r3
 8002c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c2c:	4422      	add	r2, r4
 8002c2e:	3302      	adds	r3, #2
 8002c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c34:	e7c2      	b.n	8002bbc <_printf_common+0x58>
 8002c36:	2301      	movs	r3, #1
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	47c0      	blx	r8
 8002c40:	3001      	adds	r0, #1
 8002c42:	d0e6      	beq.n	8002c12 <_printf_common+0xae>
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7d9      	b.n	8002bfc <_printf_common+0x98>

08002c48 <_printf_i>:
 8002c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4c:	7e0f      	ldrb	r7, [r1, #24]
 8002c4e:	4691      	mov	r9, r2
 8002c50:	2f78      	cmp	r7, #120	; 0x78
 8002c52:	4680      	mov	r8, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	469a      	mov	sl, r3
 8002c58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c5e:	d807      	bhi.n	8002c70 <_printf_i+0x28>
 8002c60:	2f62      	cmp	r7, #98	; 0x62
 8002c62:	d80a      	bhi.n	8002c7a <_printf_i+0x32>
 8002c64:	2f00      	cmp	r7, #0
 8002c66:	f000 80d5 	beq.w	8002e14 <_printf_i+0x1cc>
 8002c6a:	2f58      	cmp	r7, #88	; 0x58
 8002c6c:	f000 80c1 	beq.w	8002df2 <_printf_i+0x1aa>
 8002c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c78:	e03a      	b.n	8002cf0 <_printf_i+0xa8>
 8002c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c7e:	2b15      	cmp	r3, #21
 8002c80:	d8f6      	bhi.n	8002c70 <_printf_i+0x28>
 8002c82:	a101      	add	r1, pc, #4	; (adr r1, 8002c88 <_printf_i+0x40>)
 8002c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c88:	08002ce1 	.word	0x08002ce1
 8002c8c:	08002cf5 	.word	0x08002cf5
 8002c90:	08002c71 	.word	0x08002c71
 8002c94:	08002c71 	.word	0x08002c71
 8002c98:	08002c71 	.word	0x08002c71
 8002c9c:	08002c71 	.word	0x08002c71
 8002ca0:	08002cf5 	.word	0x08002cf5
 8002ca4:	08002c71 	.word	0x08002c71
 8002ca8:	08002c71 	.word	0x08002c71
 8002cac:	08002c71 	.word	0x08002c71
 8002cb0:	08002c71 	.word	0x08002c71
 8002cb4:	08002dfb 	.word	0x08002dfb
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002db5 	.word	0x08002db5
 8002cc0:	08002c71 	.word	0x08002c71
 8002cc4:	08002c71 	.word	0x08002c71
 8002cc8:	08002e1d 	.word	0x08002e1d
 8002ccc:	08002c71 	.word	0x08002c71
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002c71 	.word	0x08002c71
 8002cd8:	08002c71 	.word	0x08002c71
 8002cdc:	08002dbd 	.word	0x08002dbd
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	1d1a      	adds	r2, r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	602a      	str	r2, [r5, #0]
 8002ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0a0      	b.n	8002e36 <_printf_i+0x1ee>
 8002cf4:	6820      	ldr	r0, [r4, #0]
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	0607      	lsls	r7, r0, #24
 8002cfa:	f103 0104 	add.w	r1, r3, #4
 8002cfe:	6029      	str	r1, [r5, #0]
 8002d00:	d501      	bpl.n	8002d06 <_printf_i+0xbe>
 8002d02:	681e      	ldr	r6, [r3, #0]
 8002d04:	e003      	b.n	8002d0e <_printf_i+0xc6>
 8002d06:	0646      	lsls	r6, r0, #25
 8002d08:	d5fb      	bpl.n	8002d02 <_printf_i+0xba>
 8002d0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d0e:	2e00      	cmp	r6, #0
 8002d10:	da03      	bge.n	8002d1a <_printf_i+0xd2>
 8002d12:	232d      	movs	r3, #45	; 0x2d
 8002d14:	4276      	negs	r6, r6
 8002d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	4859      	ldr	r0, [pc, #356]	; (8002e84 <_printf_i+0x23c>)
 8002d1e:	e012      	b.n	8002d46 <_printf_i+0xfe>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	1d19      	adds	r1, r3, #4
 8002d26:	6029      	str	r1, [r5, #0]
 8002d28:	0605      	lsls	r5, r0, #24
 8002d2a:	d501      	bpl.n	8002d30 <_printf_i+0xe8>
 8002d2c:	681e      	ldr	r6, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <_printf_i+0xee>
 8002d30:	0641      	lsls	r1, r0, #25
 8002d32:	d5fb      	bpl.n	8002d2c <_printf_i+0xe4>
 8002d34:	881e      	ldrh	r6, [r3, #0]
 8002d36:	2f6f      	cmp	r7, #111	; 0x6f
 8002d38:	bf0c      	ite	eq
 8002d3a:	2308      	moveq	r3, #8
 8002d3c:	230a      	movne	r3, #10
 8002d3e:	4851      	ldr	r0, [pc, #324]	; (8002e84 <_printf_i+0x23c>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d46:	6865      	ldr	r5, [r4, #4]
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	bfa8      	it	ge
 8002d4c:	6821      	ldrge	r1, [r4, #0]
 8002d4e:	60a5      	str	r5, [r4, #8]
 8002d50:	bfa4      	itt	ge
 8002d52:	f021 0104 	bicge.w	r1, r1, #4
 8002d56:	6021      	strge	r1, [r4, #0]
 8002d58:	b90e      	cbnz	r6, 8002d5e <_printf_i+0x116>
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d04b      	beq.n	8002df6 <_printf_i+0x1ae>
 8002d5e:	4615      	mov	r5, r2
 8002d60:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d64:	fb03 6711 	mls	r7, r3, r1, r6
 8002d68:	5dc7      	ldrb	r7, [r0, r7]
 8002d6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d6e:	4637      	mov	r7, r6
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	460e      	mov	r6, r1
 8002d74:	d9f4      	bls.n	8002d60 <_printf_i+0x118>
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d10b      	bne.n	8002d92 <_printf_i+0x14a>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	07de      	lsls	r6, r3, #31
 8002d7e:	d508      	bpl.n	8002d92 <_printf_i+0x14a>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	6861      	ldr	r1, [r4, #4]
 8002d84:	4299      	cmp	r1, r3
 8002d86:	bfde      	ittt	le
 8002d88:	2330      	movle	r3, #48	; 0x30
 8002d8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d8e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d92:	1b52      	subs	r2, r2, r5
 8002d94:	6122      	str	r2, [r4, #16]
 8002d96:	464b      	mov	r3, r9
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	f8cd a000 	str.w	sl, [sp]
 8002da0:	aa03      	add	r2, sp, #12
 8002da2:	f7ff fedf 	bl	8002b64 <_printf_common>
 8002da6:	3001      	adds	r0, #1
 8002da8:	d14a      	bne.n	8002e40 <_printf_i+0x1f8>
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dae:	b004      	add	sp, #16
 8002db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	6023      	str	r3, [r4, #0]
 8002dbc:	2778      	movs	r7, #120	; 0x78
 8002dbe:	4832      	ldr	r0, [pc, #200]	; (8002e88 <_printf_i+0x240>)
 8002dc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	6829      	ldr	r1, [r5, #0]
 8002dc8:	061f      	lsls	r7, r3, #24
 8002dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dce:	d402      	bmi.n	8002dd6 <_printf_i+0x18e>
 8002dd0:	065f      	lsls	r7, r3, #25
 8002dd2:	bf48      	it	mi
 8002dd4:	b2b6      	uxthmi	r6, r6
 8002dd6:	07df      	lsls	r7, r3, #31
 8002dd8:	bf48      	it	mi
 8002dda:	f043 0320 	orrmi.w	r3, r3, #32
 8002dde:	6029      	str	r1, [r5, #0]
 8002de0:	bf48      	it	mi
 8002de2:	6023      	strmi	r3, [r4, #0]
 8002de4:	b91e      	cbnz	r6, 8002dee <_printf_i+0x1a6>
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f023 0320 	bic.w	r3, r3, #32
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	2310      	movs	r3, #16
 8002df0:	e7a6      	b.n	8002d40 <_printf_i+0xf8>
 8002df2:	4824      	ldr	r0, [pc, #144]	; (8002e84 <_printf_i+0x23c>)
 8002df4:	e7e4      	b.n	8002dc0 <_printf_i+0x178>
 8002df6:	4615      	mov	r5, r2
 8002df8:	e7bd      	b.n	8002d76 <_printf_i+0x12e>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	6826      	ldr	r6, [r4, #0]
 8002dfe:	1d18      	adds	r0, r3, #4
 8002e00:	6961      	ldr	r1, [r4, #20]
 8002e02:	6028      	str	r0, [r5, #0]
 8002e04:	0635      	lsls	r5, r6, #24
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	d501      	bpl.n	8002e0e <_printf_i+0x1c6>
 8002e0a:	6019      	str	r1, [r3, #0]
 8002e0c:	e002      	b.n	8002e14 <_printf_i+0x1cc>
 8002e0e:	0670      	lsls	r0, r6, #25
 8002e10:	d5fb      	bpl.n	8002e0a <_printf_i+0x1c2>
 8002e12:	8019      	strh	r1, [r3, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	4615      	mov	r5, r2
 8002e18:	6123      	str	r3, [r4, #16]
 8002e1a:	e7bc      	b.n	8002d96 <_printf_i+0x14e>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	1d1a      	adds	r2, r3, #4
 8002e22:	602a      	str	r2, [r5, #0]
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	6862      	ldr	r2, [r4, #4]
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f96d 	bl	8003108 <memchr>
 8002e2e:	b108      	cbz	r0, 8002e34 <_printf_i+0x1ec>
 8002e30:	1b40      	subs	r0, r0, r5
 8002e32:	6060      	str	r0, [r4, #4]
 8002e34:	6863      	ldr	r3, [r4, #4]
 8002e36:	6123      	str	r3, [r4, #16]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3e:	e7aa      	b.n	8002d96 <_printf_i+0x14e>
 8002e40:	462a      	mov	r2, r5
 8002e42:	4649      	mov	r1, r9
 8002e44:	4640      	mov	r0, r8
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	47d0      	blx	sl
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d0ad      	beq.n	8002daa <_printf_i+0x162>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	079b      	lsls	r3, r3, #30
 8002e52:	d413      	bmi.n	8002e7c <_printf_i+0x234>
 8002e54:	68e0      	ldr	r0, [r4, #12]
 8002e56:	9b03      	ldr	r3, [sp, #12]
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	bfb8      	it	lt
 8002e5c:	4618      	movlt	r0, r3
 8002e5e:	e7a6      	b.n	8002dae <_printf_i+0x166>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4632      	mov	r2, r6
 8002e64:	4649      	mov	r1, r9
 8002e66:	4640      	mov	r0, r8
 8002e68:	47d0      	blx	sl
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d09d      	beq.n	8002daa <_printf_i+0x162>
 8002e6e:	3501      	adds	r5, #1
 8002e70:	68e3      	ldr	r3, [r4, #12]
 8002e72:	9903      	ldr	r1, [sp, #12]
 8002e74:	1a5b      	subs	r3, r3, r1
 8002e76:	42ab      	cmp	r3, r5
 8002e78:	dcf2      	bgt.n	8002e60 <_printf_i+0x218>
 8002e7a:	e7eb      	b.n	8002e54 <_printf_i+0x20c>
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	f104 0619 	add.w	r6, r4, #25
 8002e82:	e7f5      	b.n	8002e70 <_printf_i+0x228>
 8002e84:	0800335b 	.word	0x0800335b
 8002e88:	0800336c 	.word	0x0800336c

08002e8c <__sflush_r>:
 8002e8c:	898a      	ldrh	r2, [r1, #12]
 8002e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e90:	4605      	mov	r5, r0
 8002e92:	0710      	lsls	r0, r2, #28
 8002e94:	460c      	mov	r4, r1
 8002e96:	d457      	bmi.n	8002f48 <__sflush_r+0xbc>
 8002e98:	684b      	ldr	r3, [r1, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	dc04      	bgt.n	8002ea8 <__sflush_r+0x1c>
 8002e9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dc01      	bgt.n	8002ea8 <__sflush_r+0x1c>
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eaa:	2e00      	cmp	r6, #0
 8002eac:	d0fa      	beq.n	8002ea4 <__sflush_r+0x18>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002eb4:	682f      	ldr	r7, [r5, #0]
 8002eb6:	6a21      	ldr	r1, [r4, #32]
 8002eb8:	602b      	str	r3, [r5, #0]
 8002eba:	d032      	beq.n	8002f22 <__sflush_r+0x96>
 8002ebc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	075a      	lsls	r2, r3, #29
 8002ec2:	d505      	bpl.n	8002ed0 <__sflush_r+0x44>
 8002ec4:	6863      	ldr	r3, [r4, #4]
 8002ec6:	1ac0      	subs	r0, r0, r3
 8002ec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eca:	b10b      	cbz	r3, 8002ed0 <__sflush_r+0x44>
 8002ecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ece:	1ac0      	subs	r0, r0, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	6a21      	ldr	r1, [r4, #32]
 8002eda:	47b0      	blx	r6
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	d106      	bne.n	8002ef0 <__sflush_r+0x64>
 8002ee2:	6829      	ldr	r1, [r5, #0]
 8002ee4:	291d      	cmp	r1, #29
 8002ee6:	d82b      	bhi.n	8002f40 <__sflush_r+0xb4>
 8002ee8:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <__sflush_r+0x100>)
 8002eea:	410a      	asrs	r2, r1
 8002eec:	07d6      	lsls	r6, r2, #31
 8002eee:	d427      	bmi.n	8002f40 <__sflush_r+0xb4>
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	6062      	str	r2, [r4, #4]
 8002ef4:	6922      	ldr	r2, [r4, #16]
 8002ef6:	04d9      	lsls	r1, r3, #19
 8002ef8:	6022      	str	r2, [r4, #0]
 8002efa:	d504      	bpl.n	8002f06 <__sflush_r+0x7a>
 8002efc:	1c42      	adds	r2, r0, #1
 8002efe:	d101      	bne.n	8002f04 <__sflush_r+0x78>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b903      	cbnz	r3, 8002f06 <__sflush_r+0x7a>
 8002f04:	6560      	str	r0, [r4, #84]	; 0x54
 8002f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f08:	602f      	str	r7, [r5, #0]
 8002f0a:	2900      	cmp	r1, #0
 8002f0c:	d0ca      	beq.n	8002ea4 <__sflush_r+0x18>
 8002f0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f12:	4299      	cmp	r1, r3
 8002f14:	d002      	beq.n	8002f1c <__sflush_r+0x90>
 8002f16:	4628      	mov	r0, r5
 8002f18:	f7ff fbee 	bl	80026f8 <_free_r>
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	6360      	str	r0, [r4, #52]	; 0x34
 8002f20:	e7c1      	b.n	8002ea6 <__sflush_r+0x1a>
 8002f22:	2301      	movs	r3, #1
 8002f24:	4628      	mov	r0, r5
 8002f26:	47b0      	blx	r6
 8002f28:	1c41      	adds	r1, r0, #1
 8002f2a:	d1c8      	bne.n	8002ebe <__sflush_r+0x32>
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0c5      	beq.n	8002ebe <__sflush_r+0x32>
 8002f32:	2b1d      	cmp	r3, #29
 8002f34:	d001      	beq.n	8002f3a <__sflush_r+0xae>
 8002f36:	2b16      	cmp	r3, #22
 8002f38:	d101      	bne.n	8002f3e <__sflush_r+0xb2>
 8002f3a:	602f      	str	r7, [r5, #0]
 8002f3c:	e7b2      	b.n	8002ea4 <__sflush_r+0x18>
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f44:	81a3      	strh	r3, [r4, #12]
 8002f46:	e7ae      	b.n	8002ea6 <__sflush_r+0x1a>
 8002f48:	690f      	ldr	r7, [r1, #16]
 8002f4a:	2f00      	cmp	r7, #0
 8002f4c:	d0aa      	beq.n	8002ea4 <__sflush_r+0x18>
 8002f4e:	0793      	lsls	r3, r2, #30
 8002f50:	bf18      	it	ne
 8002f52:	2300      	movne	r3, #0
 8002f54:	680e      	ldr	r6, [r1, #0]
 8002f56:	bf08      	it	eq
 8002f58:	694b      	ldreq	r3, [r1, #20]
 8002f5a:	1bf6      	subs	r6, r6, r7
 8002f5c:	600f      	str	r7, [r1, #0]
 8002f5e:	608b      	str	r3, [r1, #8]
 8002f60:	2e00      	cmp	r6, #0
 8002f62:	dd9f      	ble.n	8002ea4 <__sflush_r+0x18>
 8002f64:	4633      	mov	r3, r6
 8002f66:	463a      	mov	r2, r7
 8002f68:	4628      	mov	r0, r5
 8002f6a:	6a21      	ldr	r1, [r4, #32]
 8002f6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002f70:	47e0      	blx	ip
 8002f72:	2800      	cmp	r0, #0
 8002f74:	dc06      	bgt.n	8002f84 <__sflush_r+0xf8>
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	e790      	b.n	8002ea6 <__sflush_r+0x1a>
 8002f84:	4407      	add	r7, r0
 8002f86:	1a36      	subs	r6, r6, r0
 8002f88:	e7ea      	b.n	8002f60 <__sflush_r+0xd4>
 8002f8a:	bf00      	nop
 8002f8c:	dfbffffe 	.word	0xdfbffffe

08002f90 <_fflush_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	690b      	ldr	r3, [r1, #16]
 8002f94:	4605      	mov	r5, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	b913      	cbnz	r3, 8002fa0 <_fflush_r+0x10>
 8002f9a:	2500      	movs	r5, #0
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	b118      	cbz	r0, 8002faa <_fflush_r+0x1a>
 8002fa2:	6a03      	ldr	r3, [r0, #32]
 8002fa4:	b90b      	cbnz	r3, 8002faa <_fflush_r+0x1a>
 8002fa6:	f7ff f9b1 	bl	800230c <__sinit>
 8002faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f3      	beq.n	8002f9a <_fflush_r+0xa>
 8002fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fb4:	07d0      	lsls	r0, r2, #31
 8002fb6:	d404      	bmi.n	8002fc2 <_fflush_r+0x32>
 8002fb8:	0599      	lsls	r1, r3, #22
 8002fba:	d402      	bmi.n	8002fc2 <_fflush_r+0x32>
 8002fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fbe:	f7ff fb99 	bl	80026f4 <__retarget_lock_acquire_recursive>
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	f7ff ff61 	bl	8002e8c <__sflush_r>
 8002fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fcc:	4605      	mov	r5, r0
 8002fce:	07da      	lsls	r2, r3, #31
 8002fd0:	d4e4      	bmi.n	8002f9c <_fflush_r+0xc>
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	059b      	lsls	r3, r3, #22
 8002fd6:	d4e1      	bmi.n	8002f9c <_fflush_r+0xc>
 8002fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fda:	f7ff fb8c 	bl	80026f6 <__retarget_lock_release_recursive>
 8002fde:	e7dd      	b.n	8002f9c <_fflush_r+0xc>

08002fe0 <__swhatbuf_r>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe8:	4615      	mov	r5, r2
 8002fea:	2900      	cmp	r1, #0
 8002fec:	461e      	mov	r6, r3
 8002fee:	b096      	sub	sp, #88	; 0x58
 8002ff0:	da0c      	bge.n	800300c <__swhatbuf_r+0x2c>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ffa:	bf0c      	ite	eq
 8002ffc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003000:	2340      	movne	r3, #64	; 0x40
 8003002:	2000      	movs	r0, #0
 8003004:	6031      	str	r1, [r6, #0]
 8003006:	602b      	str	r3, [r5, #0]
 8003008:	b016      	add	sp, #88	; 0x58
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	466a      	mov	r2, sp
 800300e:	f000 f849 	bl	80030a4 <_fstat_r>
 8003012:	2800      	cmp	r0, #0
 8003014:	dbed      	blt.n	8002ff2 <__swhatbuf_r+0x12>
 8003016:	9901      	ldr	r1, [sp, #4]
 8003018:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800301c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003020:	4259      	negs	r1, r3
 8003022:	4159      	adcs	r1, r3
 8003024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003028:	e7eb      	b.n	8003002 <__swhatbuf_r+0x22>

0800302a <__smakebuf_r>:
 800302a:	898b      	ldrh	r3, [r1, #12]
 800302c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800302e:	079d      	lsls	r5, r3, #30
 8003030:	4606      	mov	r6, r0
 8003032:	460c      	mov	r4, r1
 8003034:	d507      	bpl.n	8003046 <__smakebuf_r+0x1c>
 8003036:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800303a:	6023      	str	r3, [r4, #0]
 800303c:	6123      	str	r3, [r4, #16]
 800303e:	2301      	movs	r3, #1
 8003040:	6163      	str	r3, [r4, #20]
 8003042:	b002      	add	sp, #8
 8003044:	bd70      	pop	{r4, r5, r6, pc}
 8003046:	466a      	mov	r2, sp
 8003048:	ab01      	add	r3, sp, #4
 800304a:	f7ff ffc9 	bl	8002fe0 <__swhatbuf_r>
 800304e:	9900      	ldr	r1, [sp, #0]
 8003050:	4605      	mov	r5, r0
 8003052:	4630      	mov	r0, r6
 8003054:	f7ff fbb8 	bl	80027c8 <_malloc_r>
 8003058:	b948      	cbnz	r0, 800306e <__smakebuf_r+0x44>
 800305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305e:	059a      	lsls	r2, r3, #22
 8003060:	d4ef      	bmi.n	8003042 <__smakebuf_r+0x18>
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	81a3      	strh	r3, [r4, #12]
 800306c:	e7e3      	b.n	8003036 <__smakebuf_r+0xc>
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	6020      	str	r0, [r4, #0]
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	81a3      	strh	r3, [r4, #12]
 8003078:	9b00      	ldr	r3, [sp, #0]
 800307a:	6120      	str	r0, [r4, #16]
 800307c:	6163      	str	r3, [r4, #20]
 800307e:	9b01      	ldr	r3, [sp, #4]
 8003080:	b15b      	cbz	r3, 800309a <__smakebuf_r+0x70>
 8003082:	4630      	mov	r0, r6
 8003084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003088:	f000 f81e 	bl	80030c8 <_isatty_r>
 800308c:	b128      	cbz	r0, 800309a <__smakebuf_r+0x70>
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	f023 0303 	bic.w	r3, r3, #3
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	81a3      	strh	r3, [r4, #12]
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	431d      	orrs	r5, r3
 800309e:	81a5      	strh	r5, [r4, #12]
 80030a0:	e7cf      	b.n	8003042 <__smakebuf_r+0x18>
	...

080030a4 <_fstat_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	2300      	movs	r3, #0
 80030a8:	4d06      	ldr	r5, [pc, #24]	; (80030c4 <_fstat_r+0x20>)
 80030aa:	4604      	mov	r4, r0
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	f7fd fc98 	bl	80009e6 <_fstat>
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	d102      	bne.n	80030c0 <_fstat_r+0x1c>
 80030ba:	682b      	ldr	r3, [r5, #0]
 80030bc:	b103      	cbz	r3, 80030c0 <_fstat_r+0x1c>
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
 80030c2:	bf00      	nop
 80030c4:	20000284 	.word	0x20000284

080030c8 <_isatty_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	2300      	movs	r3, #0
 80030cc:	4d05      	ldr	r5, [pc, #20]	; (80030e4 <_isatty_r+0x1c>)
 80030ce:	4604      	mov	r4, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	f7fd fc96 	bl	8000a04 <_isatty>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_isatty_r+0x1a>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_isatty_r+0x1a>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000284 	.word	0x20000284

080030e8 <_sbrk_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	2300      	movs	r3, #0
 80030ec:	4d05      	ldr	r5, [pc, #20]	; (8003104 <_sbrk_r+0x1c>)
 80030ee:	4604      	mov	r4, r0
 80030f0:	4608      	mov	r0, r1
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	f7fd fc9c 	bl	8000a30 <_sbrk>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d102      	bne.n	8003102 <_sbrk_r+0x1a>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	b103      	cbz	r3, 8003102 <_sbrk_r+0x1a>
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	20000284 	.word	0x20000284

08003108 <memchr>:
 8003108:	4603      	mov	r3, r0
 800310a:	b510      	push	{r4, lr}
 800310c:	b2c9      	uxtb	r1, r1
 800310e:	4402      	add	r2, r0
 8003110:	4293      	cmp	r3, r2
 8003112:	4618      	mov	r0, r3
 8003114:	d101      	bne.n	800311a <memchr+0x12>
 8003116:	2000      	movs	r0, #0
 8003118:	e003      	b.n	8003122 <memchr+0x1a>
 800311a:	7804      	ldrb	r4, [r0, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	428c      	cmp	r4, r1
 8003120:	d1f6      	bne.n	8003110 <memchr+0x8>
 8003122:	bd10      	pop	{r4, pc}

08003124 <_init>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	bf00      	nop
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr

08003130 <_fini>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr
