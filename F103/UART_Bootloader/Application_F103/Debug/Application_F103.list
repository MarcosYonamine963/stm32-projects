
Application_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002414  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a0  080025a0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080025a0  080025a0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025a0  080025a0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080025a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  08002614  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08002614  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006bb8  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b7  00000000  00000000  00026c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00028148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000519  00000000  00000000  00028808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177ee  00000000  00000000  00028d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b01  00000000  00000000  0004050f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083aa0  00000000  00000000  00048010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002178  00000000  00000000  000cbab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000cdc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002508 	.word	0x08002508

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002508 	.word	0x08002508

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faa0 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ae 	bl	80002b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f858 	bl	8000210 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application v%d:%d Started!!!\n", APP_Version[0], APP_Version[1]);
 8000164:	4b09      	ldr	r3, [pc, #36]	; (800018c <main+0x40>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	4619      	mov	r1, r3
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <main+0x40>)
 800016c:	785b      	ldrb	r3, [r3, #1]
 800016e:	461a      	mov	r2, r3
 8000170:	4807      	ldr	r0, [pc, #28]	; (8000190 <main+0x44>)
 8000172:	f001 fb4d 	bl	8001810 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	4806      	ldr	r0, [pc, #24]	; (8000194 <main+0x48>)
 800017c:	f000 fd90 	bl	8000ca0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000184:	f000 fae8 	bl	8000758 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000188:	e7f5      	b.n	8000176 <main+0x2a>
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	08002520 	.word	0x08002520
 8000194:	40011000 	.word	0x40011000

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fb87 	bl	80018ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ba:	2302      	movs	r3, #2
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c2:	2310      	movs	r3, #16
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fd80 	bl	8000cd4 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001da:	f000 f8b9 	bl	8000350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 ffee 	bl	80011d8 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000202:	f000 f8a5 	bl	8000350 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	; 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_USART1_UART_Init+0x4c>)
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <MX_USART1_UART_Init+0x50>)
 8000218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_USART1_UART_Init+0x4c>)
 800021c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <MX_USART1_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_USART1_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_USART1_UART_Init+0x4c>)
 8000236:	220c      	movs	r2, #12
 8000238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_USART1_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <MX_USART1_UART_Init+0x4c>)
 8000248:	f001 f954 	bl	80014f4 <HAL_UART_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000252:	f000 f87d 	bl	8000350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000088 	.word	0x20000088
 8000260:	40013800 	.word	0x40013800

08000264 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART3_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART3_UART_Init+0x4c>)
 800029c:	f001 f92a 	bl	80014f4 <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f853 	bl	8000350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	40004800 	.word	0x40004800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <MX_GPIO_Init+0x90>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <MX_GPIO_Init+0x90>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <MX_GPIO_Init+0x90>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <MX_GPIO_Init+0x94>)
 800031c:	f000 fca8 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_GPIO_Init+0x94>)
 800033a:	f000 fb15 	bl	8000968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033e:	bf00      	nop
 8000340:	3720      	adds	r7, #32
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40011000 	.word	0x40011000

08000350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000354:	b672      	cpsid	i
}
 8000356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000358:	e7fe      	b.n	8000358 <Error_Handler+0x8>
	...

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <HAL_MspInit+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <HAL_MspInit+0x40>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <HAL_MspInit+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <HAL_MspInit+0x40>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <HAL_MspInit+0x40>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <HAL_MspInit+0x40>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a38      	ldr	r2, [pc, #224]	; (800049c <HAL_UART_MspInit+0xfc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d132      	bne.n	8000426 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <HAL_UART_MspInit+0x100>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a36      	ldr	r2, [pc, #216]	; (80004a0 <HAL_UART_MspInit+0x100>)
 80003c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <HAL_UART_MspInit+0x100>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <HAL_UART_MspInit+0x100>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a30      	ldr	r2, [pc, #192]	; (80004a0 <HAL_UART_MspInit+0x100>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <HAL_UART_MspInit+0x100>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fa:	2303      	movs	r3, #3
 80003fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	4619      	mov	r1, r3
 8000404:	4827      	ldr	r0, [pc, #156]	; (80004a4 <HAL_UART_MspInit+0x104>)
 8000406:	f000 faaf 	bl	8000968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800040a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4619      	mov	r1, r3
 800041e:	4821      	ldr	r0, [pc, #132]	; (80004a4 <HAL_UART_MspInit+0x104>)
 8000420:	f000 faa2 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000424:	e036      	b.n	8000494 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <HAL_UART_MspInit+0x108>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d131      	bne.n	8000494 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <HAL_UART_MspInit+0x100>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <HAL_UART_MspInit+0x100>)
 8000436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043a:	61d3      	str	r3, [r2, #28]
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_UART_MspInit+0x100>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_UART_MspInit+0x100>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <HAL_UART_MspInit+0x100>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_UART_MspInit+0x100>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000466:	2302      	movs	r3, #2
 8000468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <HAL_UART_MspInit+0x10c>)
 8000476:	f000 fa77 	bl	8000968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800047a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800047e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4619      	mov	r1, r3
 800048e:	4807      	ldr	r0, [pc, #28]	; (80004ac <HAL_UART_MspInit+0x10c>)
 8000490:	f000 fa6a 	bl	8000968 <HAL_GPIO_Init>
}
 8000494:	bf00      	nop
 8000496:	3728      	adds	r7, #40	; 0x28
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40013800 	.word	0x40013800
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40004800 	.word	0x40004800
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f6:	f000 f913 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b086      	sub	sp, #24
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	60b9      	str	r1, [r7, #8]
 8000508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e00a      	b.n	8000526 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000510:	f3af 8000 	nop.w
 8000514:	4601      	mov	r1, r0
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	60ba      	str	r2, [r7, #8]
 800051c:	b2ca      	uxtb	r2, r1
 800051e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	429a      	cmp	r2, r3
 800052c:	dbf0      	blt.n	8000510 <_read+0x12>
  }

  return len;
 800052e:	687b      	ldr	r3, [r7, #4]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	e009      	b.n	800055e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60ba      	str	r2, [r7, #8]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	3301      	adds	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	dbf1      	blt.n	800054a <_write+0x12>
  }
  return len;
 8000566:	687b      	ldr	r3, [r7, #4]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <_close>:

int _close(int file)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000596:	605a      	str	r2, [r3, #4]
  return 0;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <_isatty>:

int _isatty(int file)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <_sbrk+0x5c>)
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <_sbrk+0x60>)
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <_sbrk+0x64>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <_sbrk+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d207      	bcs.n	8000610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000600:	f001 f9aa 	bl	8001958 <__errno>
 8000604:	4603      	mov	r3, r0
 8000606:	220c      	movs	r2, #12
 8000608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060e:	e009      	b.n	8000624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <_sbrk+0x64>)
 8000620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20005000 	.word	0x20005000
 8000630:	00000400 	.word	0x00000400
 8000634:	20000118 	.word	0x20000118
 8000638:	20000270 	.word	0x20000270

0800063c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000648:	f7ff fff8 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800064e:	490c      	ldr	r1, [pc, #48]	; (8000680 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000664:	4c09      	ldr	r4, [pc, #36]	; (800068c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000672:	f001 f977 	bl	8001964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff fd69 	bl	800014c <main>
  bx lr
 800067a:	4770      	bx	lr
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000684:	080025a8 	.word	0x080025a8
  ldr r2, =_sbss
 8000688:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800068c:	2000026c 	.word	0x2000026c

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_Init+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_Init+0x28>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f92b 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff fe54 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f935 	bl	800094e <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006fc:	f000 f90b 	bl	8000916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000004 	.word	0x20000004
 8000718:	2000000c 	.word	0x2000000c
 800071c:	20000008 	.word	0x20000008

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x1c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x20>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_IncTick+0x20>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	2000000c 	.word	0x2000000c
 8000740:	2000011c 	.word	0x2000011c

08000744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <HAL_GetTick+0x10>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	2000011c 	.word	0x2000011c

08000758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff fff0 	bl	8000744 <HAL_GetTick>
 8000764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000770:	d005      	beq.n	800077e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_Delay+0x44>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077e:	bf00      	nop
 8000780:	f7ff ffe0 	bl	8000744 <HAL_GetTick>
 8000784:	4602      	mov	r2, r0
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	429a      	cmp	r2, r3
 800078e:	d8f7      	bhi.n	8000780 <HAL_Delay+0x28>
  {
  }
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000000c 	.word	0x2000000c

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	; (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	; 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e0:	f7ff ff90 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff49 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff5e 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff90 	bl	8000858 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5f 	bl	8000804 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffb0 	bl	80008bc <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097a:	e169      	b.n	8000c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800097c:	2201      	movs	r2, #1
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	429a      	cmp	r2, r3
 8000996:	f040 8158 	bne.w	8000c4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4a9a      	ldr	r2, [pc, #616]	; (8000c08 <HAL_GPIO_Init+0x2a0>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d05e      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009a4:	4a98      	ldr	r2, [pc, #608]	; (8000c08 <HAL_GPIO_Init+0x2a0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d875      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009aa:	4a98      	ldr	r2, [pc, #608]	; (8000c0c <HAL_GPIO_Init+0x2a4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d058      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009b0:	4a96      	ldr	r2, [pc, #600]	; (8000c0c <HAL_GPIO_Init+0x2a4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d86f      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009b6:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <HAL_GPIO_Init+0x2a8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d052      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009bc:	4a94      	ldr	r2, [pc, #592]	; (8000c10 <HAL_GPIO_Init+0x2a8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d869      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009c2:	4a94      	ldr	r2, [pc, #592]	; (8000c14 <HAL_GPIO_Init+0x2ac>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d04c      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009c8:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <HAL_GPIO_Init+0x2ac>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d863      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009ce:	4a92      	ldr	r2, [pc, #584]	; (8000c18 <HAL_GPIO_Init+0x2b0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d046      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009d4:	4a90      	ldr	r2, [pc, #576]	; (8000c18 <HAL_GPIO_Init+0x2b0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d85d      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d82a      	bhi.n	8000a34 <HAL_GPIO_Init+0xcc>
 80009de:	2b12      	cmp	r3, #18
 80009e0:	d859      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009e2:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <HAL_GPIO_Init+0x80>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	08000a63 	.word	0x08000a63
 80009ec:	08000a3d 	.word	0x08000a3d
 80009f0:	08000a4f 	.word	0x08000a4f
 80009f4:	08000a91 	.word	0x08000a91
 80009f8:	08000a97 	.word	0x08000a97
 80009fc:	08000a97 	.word	0x08000a97
 8000a00:	08000a97 	.word	0x08000a97
 8000a04:	08000a97 	.word	0x08000a97
 8000a08:	08000a97 	.word	0x08000a97
 8000a0c:	08000a97 	.word	0x08000a97
 8000a10:	08000a97 	.word	0x08000a97
 8000a14:	08000a97 	.word	0x08000a97
 8000a18:	08000a97 	.word	0x08000a97
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a97 	.word	0x08000a97
 8000a24:	08000a97 	.word	0x08000a97
 8000a28:	08000a97 	.word	0x08000a97
 8000a2c:	08000a45 	.word	0x08000a45
 8000a30:	08000a59 	.word	0x08000a59
 8000a34:	4a79      	ldr	r2, [pc, #484]	; (8000c1c <HAL_GPIO_Init+0x2b4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d013      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a3a:	e02c      	b.n	8000a96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	623b      	str	r3, [r7, #32]
          break;
 8000a42:	e029      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	623b      	str	r3, [r7, #32]
          break;
 8000a4c:	e024      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	3308      	adds	r3, #8
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e01f      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	330c      	adds	r3, #12
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e01a      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e013      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	611a      	str	r2, [r3, #16]
          break;
 8000a82:	e009      	b.n	8000a98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a84:	2308      	movs	r3, #8
 8000a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	615a      	str	r2, [r3, #20]
          break;
 8000a8e:	e003      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          break;
 8000a96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d801      	bhi.n	8000aa2 <HAL_GPIO_Init+0x13a>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	e001      	b.n	8000aa6 <HAL_GPIO_Init+0x13e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2bff      	cmp	r3, #255	; 0xff
 8000aac:	d802      	bhi.n	8000ab4 <HAL_GPIO_Init+0x14c>
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	e002      	b.n	8000aba <HAL_GPIO_Init+0x152>
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	3b08      	subs	r3, #8
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	401a      	ands	r2, r3
 8000acc:	6a39      	ldr	r1, [r7, #32]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80b1 	beq.w	8000c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae8:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a4c      	ldr	r2, [pc, #304]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <HAL_GPIO_Init+0x2c0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d013      	beq.n	8000b54 <HAL_GPIO_Init+0x1ec>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <HAL_GPIO_Init+0x2c4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d00d      	beq.n	8000b50 <HAL_GPIO_Init+0x1e8>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3e      	ldr	r2, [pc, #248]	; (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d007      	beq.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d101      	bne.n	8000b48 <HAL_GPIO_Init+0x1e0>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e004      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	e002      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b50:	2301      	movs	r3, #1
 8000b52:	e000      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b54:	2300      	movs	r3, #0
 8000b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b58:	f002 0203 	and.w	r2, r2, #3
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b66:	492f      	ldr	r1, [pc, #188]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	492c      	ldr	r1, [pc, #176]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4928      	ldr	r1, [pc, #160]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	4922      	ldr	r1, [pc, #136]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	491e      	ldr	r1, [pc, #120]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d006      	beq.n	8000bde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	4918      	ldr	r1, [pc, #96]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	4914      	ldr	r1, [pc, #80]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d021      	beq.n	8000c3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	490e      	ldr	r1, [pc, #56]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
 8000c04:	e021      	b.n	8000c4a <HAL_GPIO_Init+0x2e2>
 8000c06:	bf00      	nop
 8000c08:	10320000 	.word	0x10320000
 8000c0c:	10310000 	.word	0x10310000
 8000c10:	10220000 	.word	0x10220000
 8000c14:	10210000 	.word	0x10210000
 8000c18:	10120000 	.word	0x10120000
 8000c1c:	10110000 	.word	0x10110000
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010000 	.word	0x40010000
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40011400 	.word	0x40011400
 8000c38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_GPIO_Init+0x304>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	4909      	ldr	r1, [pc, #36]	; (8000c6c <HAL_GPIO_Init+0x304>)
 8000c46:	4013      	ands	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f47f ae8e 	bne.w	800097c <HAL_GPIO_Init+0x14>
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	372c      	adds	r7, #44	; 0x2c
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c8c:	e003      	b.n	8000c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	611a      	str	r2, [r3, #16]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43d9      	mvns	r1, r3
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	611a      	str	r2, [r3, #16]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e272      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e24c      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcc8 	bl	8000744 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fcc4 	bl	8000744 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e200      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fcb4 	bl	8000744 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fcb0 	bl	8000744 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1ec      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1c0      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fc69 	bl	8000744 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc65 	bl	8000744 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1a1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc48 	bl	8000744 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc44 	bl	8000744 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e180      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc28 	bl	8000744 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc24 	bl	8000744 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e160      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 face 	bl	80014b8 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc0e 	bl	8000744 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc0a 	bl	8000744 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e146      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b88      	ldr	r3, [pc, #544]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a87      	ldr	r2, [pc, #540]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b85      	ldr	r3, [pc, #532]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b82      	ldr	r3, [pc, #520]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fbcb 	bl	8000744 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fbc7 	bl	8000744 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e103      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b75      	ldr	r3, [pc, #468]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a69      	ldr	r2, [pc, #420]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b67      	ldr	r3, [pc, #412]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a66      	ldr	r2, [pc, #408]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b61      	ldr	r3, [pc, #388]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a60      	ldr	r2, [pc, #384]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a5d      	ldr	r2, [pc, #372]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb7b 	bl	8000744 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fb77 	bl	8000744 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0b1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb65 	bl	8000744 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb61 	bl	8000744 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e09b      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb35 	bl	8000744 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fb31 	bl	8000744 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e06d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4921      	ldr	r1, [pc, #132]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	491b      	ldr	r1, [pc, #108]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb05 	bl	8000744 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fb01 	bl	8000744 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e03d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e035      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff faee 	bl	8000744 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff faea 	bl	8000744 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e026      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e01e      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
 80011a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_OscConfig+0x500>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0d0      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ec:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4965      	ldr	r1, [pc, #404]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b63      	ldr	r3, [pc, #396]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0b8      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800123e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	494d      	ldr	r1, [pc, #308]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e07f      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e073      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06b      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f023 0203 	bic.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4936      	ldr	r1, [pc, #216]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa3c 	bl	8000744 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff fa38 	bl	8000744 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e053      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 020c 	and.w	r2, r3, #12
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1eb      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d210      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4922      	ldr	r1, [pc, #136]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e032      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4916      	ldr	r1, [pc, #88]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	490e      	ldr	r1, [pc, #56]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001366:	f000 f821 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	490a      	ldr	r1, [pc, #40]	; (80013a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f99a 	bl	80006c0 <HAL_InitTick>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	40021000 	.word	0x40021000
 80013a0:	08002540 	.word	0x08002540
 80013a4:	20000004 	.word	0x20000004
 80013a8:	20000008 	.word	0x20000008

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_RCC_GetSysClockFreq+0x94>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x30>
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x36>
 80013da:	e027      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 80013de:	613b      	str	r3, [r7, #16]
      break;
 80013e0:	e027      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d010      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_RCC_GetSysClockFreq+0x94>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	0c5b      	lsrs	r3, r3, #17
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 800140e:	fb03 f202 	mul.w	r2, r3, r2
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e004      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	613b      	str	r3, [r7, #16]
      break;
 800142a:	e002      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 800142e:	613b      	str	r3, [r7, #16]
      break;
 8001430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001432:	693b      	ldr	r3, [r7, #16]
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	007a1200 	.word	0x007a1200
 8001448:	08002558 	.word	0x08002558
 800144c:	08002568 	.word	0x08002568
 8001450:	003d0900 	.word	0x003d0900

08001454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_RCC_GetHCLKFreq+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff2 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	; (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	08002550 	.word	0x08002550

08001490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001494:	f7ff ffde 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	0adb      	lsrs	r3, r3, #11
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4903      	ldr	r1, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08002550 	.word	0x08002550

080014b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <RCC_Delay+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <RCC_Delay+0x38>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a5b      	lsrs	r3, r3, #9
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d4:	bf00      	nop
  }
  while (Delay --);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	60fa      	str	r2, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <RCC_Delay+0x1c>
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000004 	.word	0x20000004
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e042      	b.n	800158c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe ff40 	bl	80003a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	; 0x24
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f82b 	bl	8001594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800154c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800155c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800156c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015ce:	f023 030c 	bic.w	r3, r3, #12
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	430b      	orrs	r3, r1
 80015da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <UART_SetConfig+0x114>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d103      	bne.n	8001604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015fc:	f7ff ff48 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	e002      	b.n	800160a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001604:	f7ff ff30 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 8001608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009a      	lsls	r2, r3, #2
 8001614:	441a      	add	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	4a22      	ldr	r2, [pc, #136]	; (80016ac <UART_SetConfig+0x118>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	0119      	lsls	r1, r3, #4
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	009a      	lsls	r2, r3, #2
 8001634:	441a      	add	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <UART_SetConfig+0x118>)
 8001642:	fba3 0302 	umull	r0, r3, r3, r2
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	fb00 f303 	mul.w	r3, r0, r3
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	3332      	adds	r3, #50	; 0x32
 8001654:	4a15      	ldr	r2, [pc, #84]	; (80016ac <UART_SetConfig+0x118>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001660:	4419      	add	r1, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	009a      	lsls	r2, r3, #2
 800166c:	441a      	add	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fbb2 f2f3 	udiv	r2, r2, r3
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <UART_SetConfig+0x118>)
 800167a:	fba3 0302 	umull	r0, r3, r3, r2
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2064      	movs	r0, #100	; 0x64
 8001682:	fb00 f303 	mul.w	r3, r0, r3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	3332      	adds	r3, #50	; 0x32
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <UART_SetConfig+0x118>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	f003 020f 	and.w	r2, r3, #15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	440a      	add	r2, r1
 800169e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013800 	.word	0x40013800
 80016ac:	51eb851f 	.word	0x51eb851f

080016b0 <std>:
 80016b0:	2300      	movs	r3, #0
 80016b2:	b510      	push	{r4, lr}
 80016b4:	4604      	mov	r4, r0
 80016b6:	e9c0 3300 	strd	r3, r3, [r0]
 80016ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016be:	6083      	str	r3, [r0, #8]
 80016c0:	8181      	strh	r1, [r0, #12]
 80016c2:	6643      	str	r3, [r0, #100]	; 0x64
 80016c4:	81c2      	strh	r2, [r0, #14]
 80016c6:	6183      	str	r3, [r0, #24]
 80016c8:	4619      	mov	r1, r3
 80016ca:	2208      	movs	r2, #8
 80016cc:	305c      	adds	r0, #92	; 0x5c
 80016ce:	f000 f8f4 	bl	80018ba <memset>
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <std+0x38>)
 80016d4:	6224      	str	r4, [r4, #32]
 80016d6:	6263      	str	r3, [r4, #36]	; 0x24
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <std+0x3c>)
 80016da:	62a3      	str	r3, [r4, #40]	; 0x28
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <std+0x40>)
 80016de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <std+0x44>)
 80016e2:	6323      	str	r3, [r4, #48]	; 0x30
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	08001835 	.word	0x08001835
 80016ec:	08001857 	.word	0x08001857
 80016f0:	0800188f 	.word	0x0800188f
 80016f4:	080018b3 	.word	0x080018b3

080016f8 <stdio_exit_handler>:
 80016f8:	4a02      	ldr	r2, [pc, #8]	; (8001704 <stdio_exit_handler+0xc>)
 80016fa:	4903      	ldr	r1, [pc, #12]	; (8001708 <stdio_exit_handler+0x10>)
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <stdio_exit_handler+0x14>)
 80016fe:	f000 b869 	b.w	80017d4 <_fwalk_sglue>
 8001702:	bf00      	nop
 8001704:	20000010 	.word	0x20000010
 8001708:	08002249 	.word	0x08002249
 800170c:	2000001c 	.word	0x2000001c

08001710 <cleanup_stdio>:
 8001710:	6841      	ldr	r1, [r0, #4]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <cleanup_stdio+0x34>)
 8001714:	b510      	push	{r4, lr}
 8001716:	4299      	cmp	r1, r3
 8001718:	4604      	mov	r4, r0
 800171a:	d001      	beq.n	8001720 <cleanup_stdio+0x10>
 800171c:	f000 fd94 	bl	8002248 <_fflush_r>
 8001720:	68a1      	ldr	r1, [r4, #8]
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <cleanup_stdio+0x38>)
 8001724:	4299      	cmp	r1, r3
 8001726:	d002      	beq.n	800172e <cleanup_stdio+0x1e>
 8001728:	4620      	mov	r0, r4
 800172a:	f000 fd8d 	bl	8002248 <_fflush_r>
 800172e:	68e1      	ldr	r1, [r4, #12]
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <cleanup_stdio+0x3c>)
 8001732:	4299      	cmp	r1, r3
 8001734:	d004      	beq.n	8001740 <cleanup_stdio+0x30>
 8001736:	4620      	mov	r0, r4
 8001738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800173c:	f000 bd84 	b.w	8002248 <_fflush_r>
 8001740:	bd10      	pop	{r4, pc}
 8001742:	bf00      	nop
 8001744:	20000120 	.word	0x20000120
 8001748:	20000188 	.word	0x20000188
 800174c:	200001f0 	.word	0x200001f0

08001750 <global_stdio_init.part.0>:
 8001750:	b510      	push	{r4, lr}
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <global_stdio_init.part.0+0x30>)
 8001754:	4c0b      	ldr	r4, [pc, #44]	; (8001784 <global_stdio_init.part.0+0x34>)
 8001756:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <global_stdio_init.part.0+0x38>)
 8001758:	4620      	mov	r0, r4
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	2104      	movs	r1, #4
 800175e:	2200      	movs	r2, #0
 8001760:	f7ff ffa6 	bl	80016b0 <std>
 8001764:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001768:	2201      	movs	r2, #1
 800176a:	2109      	movs	r1, #9
 800176c:	f7ff ffa0 	bl	80016b0 <std>
 8001770:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001774:	2202      	movs	r2, #2
 8001776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800177a:	2112      	movs	r1, #18
 800177c:	f7ff bf98 	b.w	80016b0 <std>
 8001780:	20000258 	.word	0x20000258
 8001784:	20000120 	.word	0x20000120
 8001788:	080016f9 	.word	0x080016f9

0800178c <__sfp_lock_acquire>:
 800178c:	4801      	ldr	r0, [pc, #4]	; (8001794 <__sfp_lock_acquire+0x8>)
 800178e:	f000 b90d 	b.w	80019ac <__retarget_lock_acquire_recursive>
 8001792:	bf00      	nop
 8001794:	20000261 	.word	0x20000261

08001798 <__sfp_lock_release>:
 8001798:	4801      	ldr	r0, [pc, #4]	; (80017a0 <__sfp_lock_release+0x8>)
 800179a:	f000 b908 	b.w	80019ae <__retarget_lock_release_recursive>
 800179e:	bf00      	nop
 80017a0:	20000261 	.word	0x20000261

080017a4 <__sinit>:
 80017a4:	b510      	push	{r4, lr}
 80017a6:	4604      	mov	r4, r0
 80017a8:	f7ff fff0 	bl	800178c <__sfp_lock_acquire>
 80017ac:	6a23      	ldr	r3, [r4, #32]
 80017ae:	b11b      	cbz	r3, 80017b8 <__sinit+0x14>
 80017b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017b4:	f7ff bff0 	b.w	8001798 <__sfp_lock_release>
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__sinit+0x28>)
 80017ba:	6223      	str	r3, [r4, #32]
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__sinit+0x2c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f5      	bne.n	80017b0 <__sinit+0xc>
 80017c4:	f7ff ffc4 	bl	8001750 <global_stdio_init.part.0>
 80017c8:	e7f2      	b.n	80017b0 <__sinit+0xc>
 80017ca:	bf00      	nop
 80017cc:	08001711 	.word	0x08001711
 80017d0:	20000258 	.word	0x20000258

080017d4 <_fwalk_sglue>:
 80017d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017d8:	4607      	mov	r7, r0
 80017da:	4688      	mov	r8, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	2600      	movs	r6, #0
 80017e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017e4:	f1b9 0901 	subs.w	r9, r9, #1
 80017e8:	d505      	bpl.n	80017f6 <_fwalk_sglue+0x22>
 80017ea:	6824      	ldr	r4, [r4, #0]
 80017ec:	2c00      	cmp	r4, #0
 80017ee:	d1f7      	bne.n	80017e0 <_fwalk_sglue+0xc>
 80017f0:	4630      	mov	r0, r6
 80017f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017f6:	89ab      	ldrh	r3, [r5, #12]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d907      	bls.n	800180c <_fwalk_sglue+0x38>
 80017fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001800:	3301      	adds	r3, #1
 8001802:	d003      	beq.n	800180c <_fwalk_sglue+0x38>
 8001804:	4629      	mov	r1, r5
 8001806:	4638      	mov	r0, r7
 8001808:	47c0      	blx	r8
 800180a:	4306      	orrs	r6, r0
 800180c:	3568      	adds	r5, #104	; 0x68
 800180e:	e7e9      	b.n	80017e4 <_fwalk_sglue+0x10>

08001810 <iprintf>:
 8001810:	b40f      	push	{r0, r1, r2, r3}
 8001812:	b507      	push	{r0, r1, r2, lr}
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <iprintf+0x20>)
 8001816:	ab04      	add	r3, sp, #16
 8001818:	6808      	ldr	r0, [r1, #0]
 800181a:	f853 2b04 	ldr.w	r2, [r3], #4
 800181e:	6881      	ldr	r1, [r0, #8]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f000 f9e1 	bl	8001be8 <_vfiprintf_r>
 8001826:	b003      	add	sp, #12
 8001828:	f85d eb04 	ldr.w	lr, [sp], #4
 800182c:	b004      	add	sp, #16
 800182e:	4770      	bx	lr
 8001830:	20000068 	.word	0x20000068

08001834 <__sread>:
 8001834:	b510      	push	{r4, lr}
 8001836:	460c      	mov	r4, r1
 8001838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800183c:	f000 f868 	bl	8001910 <_read_r>
 8001840:	2800      	cmp	r0, #0
 8001842:	bfab      	itete	ge
 8001844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001846:	89a3      	ldrhlt	r3, [r4, #12]
 8001848:	181b      	addge	r3, r3, r0
 800184a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800184e:	bfac      	ite	ge
 8001850:	6563      	strge	r3, [r4, #84]	; 0x54
 8001852:	81a3      	strhlt	r3, [r4, #12]
 8001854:	bd10      	pop	{r4, pc}

08001856 <__swrite>:
 8001856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185a:	461f      	mov	r7, r3
 800185c:	898b      	ldrh	r3, [r1, #12]
 800185e:	4605      	mov	r5, r0
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	460c      	mov	r4, r1
 8001864:	4616      	mov	r6, r2
 8001866:	d505      	bpl.n	8001874 <__swrite+0x1e>
 8001868:	2302      	movs	r3, #2
 800186a:	2200      	movs	r2, #0
 800186c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001870:	f000 f83c 	bl	80018ec <_lseek_r>
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	4632      	mov	r2, r6
 8001878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800187c:	81a3      	strh	r3, [r4, #12]
 800187e:	4628      	mov	r0, r5
 8001880:	463b      	mov	r3, r7
 8001882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800188a:	f000 b853 	b.w	8001934 <_write_r>

0800188e <__sseek>:
 800188e:	b510      	push	{r4, lr}
 8001890:	460c      	mov	r4, r1
 8001892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001896:	f000 f829 	bl	80018ec <_lseek_r>
 800189a:	1c43      	adds	r3, r0, #1
 800189c:	89a3      	ldrh	r3, [r4, #12]
 800189e:	bf15      	itete	ne
 80018a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80018a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80018aa:	81a3      	strheq	r3, [r4, #12]
 80018ac:	bf18      	it	ne
 80018ae:	81a3      	strhne	r3, [r4, #12]
 80018b0:	bd10      	pop	{r4, pc}

080018b2 <__sclose>:
 80018b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b6:	f000 b809 	b.w	80018cc <_close_r>

080018ba <memset>:
 80018ba:	4603      	mov	r3, r0
 80018bc:	4402      	add	r2, r0
 80018be:	4293      	cmp	r3, r2
 80018c0:	d100      	bne.n	80018c4 <memset+0xa>
 80018c2:	4770      	bx	lr
 80018c4:	f803 1b01 	strb.w	r1, [r3], #1
 80018c8:	e7f9      	b.n	80018be <memset+0x4>
	...

080018cc <_close_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	2300      	movs	r3, #0
 80018d0:	4d05      	ldr	r5, [pc, #20]	; (80018e8 <_close_r+0x1c>)
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	f7fe fe4a 	bl	8000570 <_close>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d102      	bne.n	80018e6 <_close_r+0x1a>
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	b103      	cbz	r3, 80018e6 <_close_r+0x1a>
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	2000025c 	.word	0x2000025c

080018ec <_lseek_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	2200      	movs	r2, #0
 80018f6:	4d05      	ldr	r5, [pc, #20]	; (800190c <_lseek_r+0x20>)
 80018f8:	602a      	str	r2, [r5, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7fe fe5c 	bl	80005b8 <_lseek>
 8001900:	1c43      	adds	r3, r0, #1
 8001902:	d102      	bne.n	800190a <_lseek_r+0x1e>
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	b103      	cbz	r3, 800190a <_lseek_r+0x1e>
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	bd38      	pop	{r3, r4, r5, pc}
 800190c:	2000025c 	.word	0x2000025c

08001910 <_read_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4604      	mov	r4, r0
 8001914:	4608      	mov	r0, r1
 8001916:	4611      	mov	r1, r2
 8001918:	2200      	movs	r2, #0
 800191a:	4d05      	ldr	r5, [pc, #20]	; (8001930 <_read_r+0x20>)
 800191c:	602a      	str	r2, [r5, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	f7fe fded 	bl	80004fe <_read>
 8001924:	1c43      	adds	r3, r0, #1
 8001926:	d102      	bne.n	800192e <_read_r+0x1e>
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	b103      	cbz	r3, 800192e <_read_r+0x1e>
 800192c:	6023      	str	r3, [r4, #0]
 800192e:	bd38      	pop	{r3, r4, r5, pc}
 8001930:	2000025c 	.word	0x2000025c

08001934 <_write_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4604      	mov	r4, r0
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	2200      	movs	r2, #0
 800193e:	4d05      	ldr	r5, [pc, #20]	; (8001954 <_write_r+0x20>)
 8001940:	602a      	str	r2, [r5, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f7fe fdf8 	bl	8000538 <_write>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_write_r+0x1e>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	b103      	cbz	r3, 8001952 <_write_r+0x1e>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	2000025c 	.word	0x2000025c

08001958 <__errno>:
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <__errno+0x8>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000068 	.word	0x20000068

08001964 <__libc_init_array>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	2600      	movs	r6, #0
 8001968:	4d0c      	ldr	r5, [pc, #48]	; (800199c <__libc_init_array+0x38>)
 800196a:	4c0d      	ldr	r4, [pc, #52]	; (80019a0 <__libc_init_array+0x3c>)
 800196c:	1b64      	subs	r4, r4, r5
 800196e:	10a4      	asrs	r4, r4, #2
 8001970:	42a6      	cmp	r6, r4
 8001972:	d109      	bne.n	8001988 <__libc_init_array+0x24>
 8001974:	f000 fdc8 	bl	8002508 <_init>
 8001978:	2600      	movs	r6, #0
 800197a:	4d0a      	ldr	r5, [pc, #40]	; (80019a4 <__libc_init_array+0x40>)
 800197c:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <__libc_init_array+0x44>)
 800197e:	1b64      	subs	r4, r4, r5
 8001980:	10a4      	asrs	r4, r4, #2
 8001982:	42a6      	cmp	r6, r4
 8001984:	d105      	bne.n	8001992 <__libc_init_array+0x2e>
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	f855 3b04 	ldr.w	r3, [r5], #4
 800198c:	4798      	blx	r3
 800198e:	3601      	adds	r6, #1
 8001990:	e7ee      	b.n	8001970 <__libc_init_array+0xc>
 8001992:	f855 3b04 	ldr.w	r3, [r5], #4
 8001996:	4798      	blx	r3
 8001998:	3601      	adds	r6, #1
 800199a:	e7f2      	b.n	8001982 <__libc_init_array+0x1e>
 800199c:	080025a0 	.word	0x080025a0
 80019a0:	080025a0 	.word	0x080025a0
 80019a4:	080025a0 	.word	0x080025a0
 80019a8:	080025a4 	.word	0x080025a4

080019ac <__retarget_lock_acquire_recursive>:
 80019ac:	4770      	bx	lr

080019ae <__retarget_lock_release_recursive>:
 80019ae:	4770      	bx	lr

080019b0 <_free_r>:
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	4605      	mov	r5, r0
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d040      	beq.n	8001a3a <_free_r+0x8a>
 80019b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019bc:	1f0c      	subs	r4, r1, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfb8      	it	lt
 80019c2:	18e4      	addlt	r4, r4, r3
 80019c4:	f000 f8dc 	bl	8001b80 <__malloc_lock>
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <_free_r+0x8c>)
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	b933      	cbnz	r3, 80019dc <_free_r+0x2c>
 80019ce:	6063      	str	r3, [r4, #4]
 80019d0:	6014      	str	r4, [r2, #0]
 80019d2:	4628      	mov	r0, r5
 80019d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019d8:	f000 b8d8 	b.w	8001b8c <__malloc_unlock>
 80019dc:	42a3      	cmp	r3, r4
 80019de:	d908      	bls.n	80019f2 <_free_r+0x42>
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	1821      	adds	r1, r4, r0
 80019e4:	428b      	cmp	r3, r1
 80019e6:	bf01      	itttt	eq
 80019e8:	6819      	ldreq	r1, [r3, #0]
 80019ea:	685b      	ldreq	r3, [r3, #4]
 80019ec:	1809      	addeq	r1, r1, r0
 80019ee:	6021      	streq	r1, [r4, #0]
 80019f0:	e7ed      	b.n	80019ce <_free_r+0x1e>
 80019f2:	461a      	mov	r2, r3
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	b10b      	cbz	r3, 80019fc <_free_r+0x4c>
 80019f8:	42a3      	cmp	r3, r4
 80019fa:	d9fa      	bls.n	80019f2 <_free_r+0x42>
 80019fc:	6811      	ldr	r1, [r2, #0]
 80019fe:	1850      	adds	r0, r2, r1
 8001a00:	42a0      	cmp	r0, r4
 8001a02:	d10b      	bne.n	8001a1c <_free_r+0x6c>
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	4401      	add	r1, r0
 8001a08:	1850      	adds	r0, r2, r1
 8001a0a:	4283      	cmp	r3, r0
 8001a0c:	6011      	str	r1, [r2, #0]
 8001a0e:	d1e0      	bne.n	80019d2 <_free_r+0x22>
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4408      	add	r0, r1
 8001a16:	6010      	str	r0, [r2, #0]
 8001a18:	6053      	str	r3, [r2, #4]
 8001a1a:	e7da      	b.n	80019d2 <_free_r+0x22>
 8001a1c:	d902      	bls.n	8001a24 <_free_r+0x74>
 8001a1e:	230c      	movs	r3, #12
 8001a20:	602b      	str	r3, [r5, #0]
 8001a22:	e7d6      	b.n	80019d2 <_free_r+0x22>
 8001a24:	6820      	ldr	r0, [r4, #0]
 8001a26:	1821      	adds	r1, r4, r0
 8001a28:	428b      	cmp	r3, r1
 8001a2a:	bf01      	itttt	eq
 8001a2c:	6819      	ldreq	r1, [r3, #0]
 8001a2e:	685b      	ldreq	r3, [r3, #4]
 8001a30:	1809      	addeq	r1, r1, r0
 8001a32:	6021      	streq	r1, [r4, #0]
 8001a34:	6063      	str	r3, [r4, #4]
 8001a36:	6054      	str	r4, [r2, #4]
 8001a38:	e7cb      	b.n	80019d2 <_free_r+0x22>
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
 8001a3c:	20000264 	.word	0x20000264

08001a40 <sbrk_aligned>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	4e0e      	ldr	r6, [pc, #56]	; (8001a7c <sbrk_aligned+0x3c>)
 8001a44:	460c      	mov	r4, r1
 8001a46:	6831      	ldr	r1, [r6, #0]
 8001a48:	4605      	mov	r5, r0
 8001a4a:	b911      	cbnz	r1, 8001a52 <sbrk_aligned+0x12>
 8001a4c:	f000 fcba 	bl	80023c4 <_sbrk_r>
 8001a50:	6030      	str	r0, [r6, #0]
 8001a52:	4621      	mov	r1, r4
 8001a54:	4628      	mov	r0, r5
 8001a56:	f000 fcb5 	bl	80023c4 <_sbrk_r>
 8001a5a:	1c43      	adds	r3, r0, #1
 8001a5c:	d00a      	beq.n	8001a74 <sbrk_aligned+0x34>
 8001a5e:	1cc4      	adds	r4, r0, #3
 8001a60:	f024 0403 	bic.w	r4, r4, #3
 8001a64:	42a0      	cmp	r0, r4
 8001a66:	d007      	beq.n	8001a78 <sbrk_aligned+0x38>
 8001a68:	1a21      	subs	r1, r4, r0
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 fcaa 	bl	80023c4 <_sbrk_r>
 8001a70:	3001      	adds	r0, #1
 8001a72:	d101      	bne.n	8001a78 <sbrk_aligned+0x38>
 8001a74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a78:	4620      	mov	r0, r4
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	20000268 	.word	0x20000268

08001a80 <_malloc_r>:
 8001a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a84:	1ccd      	adds	r5, r1, #3
 8001a86:	f025 0503 	bic.w	r5, r5, #3
 8001a8a:	3508      	adds	r5, #8
 8001a8c:	2d0c      	cmp	r5, #12
 8001a8e:	bf38      	it	cc
 8001a90:	250c      	movcc	r5, #12
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	4607      	mov	r7, r0
 8001a96:	db01      	blt.n	8001a9c <_malloc_r+0x1c>
 8001a98:	42a9      	cmp	r1, r5
 8001a9a:	d905      	bls.n	8001aa8 <_malloc_r+0x28>
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	2600      	movs	r6, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001aa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001b7c <_malloc_r+0xfc>
 8001aac:	f000 f868 	bl	8001b80 <__malloc_lock>
 8001ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	bb5c      	cbnz	r4, 8001b10 <_malloc_r+0x90>
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4638      	mov	r0, r7
 8001abc:	f7ff ffc0 	bl	8001a40 <sbrk_aligned>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	d155      	bne.n	8001b72 <_malloc_r+0xf2>
 8001ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8001aca:	4626      	mov	r6, r4
 8001acc:	2e00      	cmp	r6, #0
 8001ace:	d145      	bne.n	8001b5c <_malloc_r+0xdc>
 8001ad0:	2c00      	cmp	r4, #0
 8001ad2:	d048      	beq.n	8001b66 <_malloc_r+0xe6>
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4631      	mov	r1, r6
 8001ad8:	4638      	mov	r0, r7
 8001ada:	eb04 0903 	add.w	r9, r4, r3
 8001ade:	f000 fc71 	bl	80023c4 <_sbrk_r>
 8001ae2:	4581      	cmp	r9, r0
 8001ae4:	d13f      	bne.n	8001b66 <_malloc_r+0xe6>
 8001ae6:	6821      	ldr	r1, [r4, #0]
 8001ae8:	4638      	mov	r0, r7
 8001aea:	1a6d      	subs	r5, r5, r1
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7ff ffa7 	bl	8001a40 <sbrk_aligned>
 8001af2:	3001      	adds	r0, #1
 8001af4:	d037      	beq.n	8001b66 <_malloc_r+0xe6>
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	442b      	add	r3, r5
 8001afa:	6023      	str	r3, [r4, #0]
 8001afc:	f8d8 3000 	ldr.w	r3, [r8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d038      	beq.n	8001b76 <_malloc_r+0xf6>
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	42a2      	cmp	r2, r4
 8001b08:	d12b      	bne.n	8001b62 <_malloc_r+0xe2>
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	e00f      	b.n	8001b30 <_malloc_r+0xb0>
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	1b52      	subs	r2, r2, r5
 8001b14:	d41f      	bmi.n	8001b56 <_malloc_r+0xd6>
 8001b16:	2a0b      	cmp	r2, #11
 8001b18:	d917      	bls.n	8001b4a <_malloc_r+0xca>
 8001b1a:	1961      	adds	r1, r4, r5
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	6025      	str	r5, [r4, #0]
 8001b20:	bf18      	it	ne
 8001b22:	6059      	strne	r1, [r3, #4]
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	bf08      	it	eq
 8001b28:	f8c8 1000 	streq.w	r1, [r8]
 8001b2c:	5162      	str	r2, [r4, r5]
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	4638      	mov	r0, r7
 8001b32:	f104 060b 	add.w	r6, r4, #11
 8001b36:	f000 f829 	bl	8001b8c <__malloc_unlock>
 8001b3a:	f026 0607 	bic.w	r6, r6, #7
 8001b3e:	1d23      	adds	r3, r4, #4
 8001b40:	1af2      	subs	r2, r6, r3
 8001b42:	d0ae      	beq.n	8001aa2 <_malloc_r+0x22>
 8001b44:	1b9b      	subs	r3, r3, r6
 8001b46:	50a3      	str	r3, [r4, r2]
 8001b48:	e7ab      	b.n	8001aa2 <_malloc_r+0x22>
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	6862      	ldr	r2, [r4, #4]
 8001b4e:	d1dd      	bne.n	8001b0c <_malloc_r+0x8c>
 8001b50:	f8c8 2000 	str.w	r2, [r8]
 8001b54:	e7ec      	b.n	8001b30 <_malloc_r+0xb0>
 8001b56:	4623      	mov	r3, r4
 8001b58:	6864      	ldr	r4, [r4, #4]
 8001b5a:	e7ac      	b.n	8001ab6 <_malloc_r+0x36>
 8001b5c:	4634      	mov	r4, r6
 8001b5e:	6876      	ldr	r6, [r6, #4]
 8001b60:	e7b4      	b.n	8001acc <_malloc_r+0x4c>
 8001b62:	4613      	mov	r3, r2
 8001b64:	e7cc      	b.n	8001b00 <_malloc_r+0x80>
 8001b66:	230c      	movs	r3, #12
 8001b68:	4638      	mov	r0, r7
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	f000 f80e 	bl	8001b8c <__malloc_unlock>
 8001b70:	e797      	b.n	8001aa2 <_malloc_r+0x22>
 8001b72:	6025      	str	r5, [r4, #0]
 8001b74:	e7dc      	b.n	8001b30 <_malloc_r+0xb0>
 8001b76:	605b      	str	r3, [r3, #4]
 8001b78:	deff      	udf	#255	; 0xff
 8001b7a:	bf00      	nop
 8001b7c:	20000264 	.word	0x20000264

08001b80 <__malloc_lock>:
 8001b80:	4801      	ldr	r0, [pc, #4]	; (8001b88 <__malloc_lock+0x8>)
 8001b82:	f7ff bf13 	b.w	80019ac <__retarget_lock_acquire_recursive>
 8001b86:	bf00      	nop
 8001b88:	20000260 	.word	0x20000260

08001b8c <__malloc_unlock>:
 8001b8c:	4801      	ldr	r0, [pc, #4]	; (8001b94 <__malloc_unlock+0x8>)
 8001b8e:	f7ff bf0e 	b.w	80019ae <__retarget_lock_release_recursive>
 8001b92:	bf00      	nop
 8001b94:	20000260 	.word	0x20000260

08001b98 <__sfputc_r>:
 8001b98:	6893      	ldr	r3, [r2, #8]
 8001b9a:	b410      	push	{r4}
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	6093      	str	r3, [r2, #8]
 8001ba2:	da07      	bge.n	8001bb4 <__sfputc_r+0x1c>
 8001ba4:	6994      	ldr	r4, [r2, #24]
 8001ba6:	42a3      	cmp	r3, r4
 8001ba8:	db01      	blt.n	8001bae <__sfputc_r+0x16>
 8001baa:	290a      	cmp	r1, #10
 8001bac:	d102      	bne.n	8001bb4 <__sfputc_r+0x1c>
 8001bae:	bc10      	pop	{r4}
 8001bb0:	f000 bb72 	b.w	8002298 <__swbuf_r>
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	1c58      	adds	r0, r3, #1
 8001bb8:	6010      	str	r0, [r2, #0]
 8001bba:	7019      	strb	r1, [r3, #0]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	bc10      	pop	{r4}
 8001bc0:	4770      	bx	lr

08001bc2 <__sfputs_r>:
 8001bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc4:	4606      	mov	r6, r0
 8001bc6:	460f      	mov	r7, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	18d5      	adds	r5, r2, r3
 8001bcc:	42ac      	cmp	r4, r5
 8001bce:	d101      	bne.n	8001bd4 <__sfputs_r+0x12>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e007      	b.n	8001be4 <__sfputs_r+0x22>
 8001bd4:	463a      	mov	r2, r7
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bdc:	f7ff ffdc 	bl	8001b98 <__sfputc_r>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d1f3      	bne.n	8001bcc <__sfputs_r+0xa>
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001be8 <_vfiprintf_r>:
 8001be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bec:	460d      	mov	r5, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	4606      	mov	r6, r0
 8001bf4:	b09d      	sub	sp, #116	; 0x74
 8001bf6:	b118      	cbz	r0, 8001c00 <_vfiprintf_r+0x18>
 8001bf8:	6a03      	ldr	r3, [r0, #32]
 8001bfa:	b90b      	cbnz	r3, 8001c00 <_vfiprintf_r+0x18>
 8001bfc:	f7ff fdd2 	bl	80017a4 <__sinit>
 8001c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c02:	07d9      	lsls	r1, r3, #31
 8001c04:	d405      	bmi.n	8001c12 <_vfiprintf_r+0x2a>
 8001c06:	89ab      	ldrh	r3, [r5, #12]
 8001c08:	059a      	lsls	r2, r3, #22
 8001c0a:	d402      	bmi.n	8001c12 <_vfiprintf_r+0x2a>
 8001c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c0e:	f7ff fecd 	bl	80019ac <__retarget_lock_acquire_recursive>
 8001c12:	89ab      	ldrh	r3, [r5, #12]
 8001c14:	071b      	lsls	r3, r3, #28
 8001c16:	d501      	bpl.n	8001c1c <_vfiprintf_r+0x34>
 8001c18:	692b      	ldr	r3, [r5, #16]
 8001c1a:	b99b      	cbnz	r3, 8001c44 <_vfiprintf_r+0x5c>
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f000 fb78 	bl	8002314 <__swsetup_r>
 8001c24:	b170      	cbz	r0, 8001c44 <_vfiprintf_r+0x5c>
 8001c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c28:	07dc      	lsls	r4, r3, #31
 8001c2a:	d504      	bpl.n	8001c36 <_vfiprintf_r+0x4e>
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c30:	b01d      	add	sp, #116	; 0x74
 8001c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c36:	89ab      	ldrh	r3, [r5, #12]
 8001c38:	0598      	lsls	r0, r3, #22
 8001c3a:	d4f7      	bmi.n	8001c2c <_vfiprintf_r+0x44>
 8001c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c3e:	f7ff feb6 	bl	80019ae <__retarget_lock_release_recursive>
 8001c42:	e7f3      	b.n	8001c2c <_vfiprintf_r+0x44>
 8001c44:	2300      	movs	r3, #0
 8001c46:	9309      	str	r3, [sp, #36]	; 0x24
 8001c48:	2320      	movs	r3, #32
 8001c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	f04f 0901 	mov.w	r9, #1
 8001c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001e08 <_vfiprintf_r+0x220>
 8001c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c60:	4623      	mov	r3, r4
 8001c62:	469a      	mov	sl, r3
 8001c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c68:	b10a      	cbz	r2, 8001c6e <_vfiprintf_r+0x86>
 8001c6a:	2a25      	cmp	r2, #37	; 0x25
 8001c6c:	d1f9      	bne.n	8001c62 <_vfiprintf_r+0x7a>
 8001c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8001c72:	d00b      	beq.n	8001c8c <_vfiprintf_r+0xa4>
 8001c74:	465b      	mov	r3, fp
 8001c76:	4622      	mov	r2, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff ffa1 	bl	8001bc2 <__sfputs_r>
 8001c80:	3001      	adds	r0, #1
 8001c82:	f000 80a9 	beq.w	8001dd8 <_vfiprintf_r+0x1f0>
 8001c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c88:	445a      	add	r2, fp
 8001c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8001c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a1 	beq.w	8001dd8 <_vfiprintf_r+0x1f0>
 8001c96:	2300      	movs	r3, #0
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ca0:	f10a 0a01 	add.w	sl, sl, #1
 8001ca4:	9304      	str	r3, [sp, #16]
 8001ca6:	9307      	str	r3, [sp, #28]
 8001ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cac:	931a      	str	r3, [sp, #104]	; 0x68
 8001cae:	4654      	mov	r4, sl
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb6:	4854      	ldr	r0, [pc, #336]	; (8001e08 <_vfiprintf_r+0x220>)
 8001cb8:	f000 fb94 	bl	80023e4 <memchr>
 8001cbc:	9a04      	ldr	r2, [sp, #16]
 8001cbe:	b9d8      	cbnz	r0, 8001cf8 <_vfiprintf_r+0x110>
 8001cc0:	06d1      	lsls	r1, r2, #27
 8001cc2:	bf44      	itt	mi
 8001cc4:	2320      	movmi	r3, #32
 8001cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cca:	0713      	lsls	r3, r2, #28
 8001ccc:	bf44      	itt	mi
 8001cce:	232b      	movmi	r3, #43	; 0x2b
 8001cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8001cda:	d015      	beq.n	8001d08 <_vfiprintf_r+0x120>
 8001cdc:	4654      	mov	r4, sl
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f04f 0c0a 	mov.w	ip, #10
 8001ce4:	9a07      	ldr	r2, [sp, #28]
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cec:	3b30      	subs	r3, #48	; 0x30
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	d94d      	bls.n	8001d8e <_vfiprintf_r+0x1a6>
 8001cf2:	b1b0      	cbz	r0, 8001d22 <_vfiprintf_r+0x13a>
 8001cf4:	9207      	str	r2, [sp, #28]
 8001cf6:	e014      	b.n	8001d22 <_vfiprintf_r+0x13a>
 8001cf8:	eba0 0308 	sub.w	r3, r0, r8
 8001cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	46a2      	mov	sl, r4
 8001d04:	9304      	str	r3, [sp, #16]
 8001d06:	e7d2      	b.n	8001cae <_vfiprintf_r+0xc6>
 8001d08:	9b03      	ldr	r3, [sp, #12]
 8001d0a:	1d19      	adds	r1, r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	9103      	str	r1, [sp, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bfbb      	ittet	lt
 8001d14:	425b      	neglt	r3, r3
 8001d16:	f042 0202 	orrlt.w	r2, r2, #2
 8001d1a:	9307      	strge	r3, [sp, #28]
 8001d1c:	9307      	strlt	r3, [sp, #28]
 8001d1e:	bfb8      	it	lt
 8001d20:	9204      	strlt	r2, [sp, #16]
 8001d22:	7823      	ldrb	r3, [r4, #0]
 8001d24:	2b2e      	cmp	r3, #46	; 0x2e
 8001d26:	d10c      	bne.n	8001d42 <_vfiprintf_r+0x15a>
 8001d28:	7863      	ldrb	r3, [r4, #1]
 8001d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d2c:	d134      	bne.n	8001d98 <_vfiprintf_r+0x1b0>
 8001d2e:	9b03      	ldr	r3, [sp, #12]
 8001d30:	3402      	adds	r4, #2
 8001d32:	1d1a      	adds	r2, r3, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	9203      	str	r2, [sp, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bfb8      	it	lt
 8001d3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001d40:	9305      	str	r3, [sp, #20]
 8001d42:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001e0c <_vfiprintf_r+0x224>
 8001d46:	2203      	movs	r2, #3
 8001d48:	4650      	mov	r0, sl
 8001d4a:	7821      	ldrb	r1, [r4, #0]
 8001d4c:	f000 fb4a 	bl	80023e4 <memchr>
 8001d50:	b138      	cbz	r0, 8001d62 <_vfiprintf_r+0x17a>
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	9b04      	ldr	r3, [sp, #16]
 8001d56:	eba0 000a 	sub.w	r0, r0, sl
 8001d5a:	4082      	lsls	r2, r0
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	3401      	adds	r4, #1
 8001d60:	9304      	str	r3, [sp, #16]
 8001d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d66:	2206      	movs	r2, #6
 8001d68:	4829      	ldr	r0, [pc, #164]	; (8001e10 <_vfiprintf_r+0x228>)
 8001d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d6e:	f000 fb39 	bl	80023e4 <memchr>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d03f      	beq.n	8001df6 <_vfiprintf_r+0x20e>
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <_vfiprintf_r+0x22c>)
 8001d78:	bb1b      	cbnz	r3, 8001dc2 <_vfiprintf_r+0x1da>
 8001d7a:	9b03      	ldr	r3, [sp, #12]
 8001d7c:	3307      	adds	r3, #7
 8001d7e:	f023 0307 	bic.w	r3, r3, #7
 8001d82:	3308      	adds	r3, #8
 8001d84:	9303      	str	r3, [sp, #12]
 8001d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d88:	443b      	add	r3, r7
 8001d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d8c:	e768      	b.n	8001c60 <_vfiprintf_r+0x78>
 8001d8e:	460c      	mov	r4, r1
 8001d90:	2001      	movs	r0, #1
 8001d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d96:	e7a6      	b.n	8001ce6 <_vfiprintf_r+0xfe>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f04f 0c0a 	mov.w	ip, #10
 8001d9e:	4619      	mov	r1, r3
 8001da0:	3401      	adds	r4, #1
 8001da2:	9305      	str	r3, [sp, #20]
 8001da4:	4620      	mov	r0, r4
 8001da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001daa:	3a30      	subs	r2, #48	; 0x30
 8001dac:	2a09      	cmp	r2, #9
 8001dae:	d903      	bls.n	8001db8 <_vfiprintf_r+0x1d0>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0c6      	beq.n	8001d42 <_vfiprintf_r+0x15a>
 8001db4:	9105      	str	r1, [sp, #20]
 8001db6:	e7c4      	b.n	8001d42 <_vfiprintf_r+0x15a>
 8001db8:	4604      	mov	r4, r0
 8001dba:	2301      	movs	r3, #1
 8001dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dc0:	e7f0      	b.n	8001da4 <_vfiprintf_r+0x1bc>
 8001dc2:	ab03      	add	r3, sp, #12
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	462a      	mov	r2, r5
 8001dc8:	4630      	mov	r0, r6
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_vfiprintf_r+0x230>)
 8001dcc:	a904      	add	r1, sp, #16
 8001dce:	f3af 8000 	nop.w
 8001dd2:	4607      	mov	r7, r0
 8001dd4:	1c78      	adds	r0, r7, #1
 8001dd6:	d1d6      	bne.n	8001d86 <_vfiprintf_r+0x19e>
 8001dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dda:	07d9      	lsls	r1, r3, #31
 8001ddc:	d405      	bmi.n	8001dea <_vfiprintf_r+0x202>
 8001dde:	89ab      	ldrh	r3, [r5, #12]
 8001de0:	059a      	lsls	r2, r3, #22
 8001de2:	d402      	bmi.n	8001dea <_vfiprintf_r+0x202>
 8001de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001de6:	f7ff fde2 	bl	80019ae <__retarget_lock_release_recursive>
 8001dea:	89ab      	ldrh	r3, [r5, #12]
 8001dec:	065b      	lsls	r3, r3, #25
 8001dee:	f53f af1d 	bmi.w	8001c2c <_vfiprintf_r+0x44>
 8001df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001df4:	e71c      	b.n	8001c30 <_vfiprintf_r+0x48>
 8001df6:	ab03      	add	r3, sp, #12
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	462a      	mov	r2, r5
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <_vfiprintf_r+0x230>)
 8001e00:	a904      	add	r1, sp, #16
 8001e02:	f000 f87d 	bl	8001f00 <_printf_i>
 8001e06:	e7e4      	b.n	8001dd2 <_vfiprintf_r+0x1ea>
 8001e08:	0800256a 	.word	0x0800256a
 8001e0c:	08002570 	.word	0x08002570
 8001e10:	08002574 	.word	0x08002574
 8001e14:	00000000 	.word	0x00000000
 8001e18:	08001bc3 	.word	0x08001bc3

08001e1c <_printf_common>:
 8001e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e20:	4616      	mov	r6, r2
 8001e22:	4699      	mov	r9, r3
 8001e24:	688a      	ldr	r2, [r1, #8]
 8001e26:	690b      	ldr	r3, [r1, #16]
 8001e28:	4607      	mov	r7, r0
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	bfb8      	it	lt
 8001e2e:	4613      	movlt	r3, r2
 8001e30:	6033      	str	r3, [r6, #0]
 8001e32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e36:	460c      	mov	r4, r1
 8001e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e3c:	b10a      	cbz	r2, 8001e42 <_printf_common+0x26>
 8001e3e:	3301      	adds	r3, #1
 8001e40:	6033      	str	r3, [r6, #0]
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	0699      	lsls	r1, r3, #26
 8001e46:	bf42      	ittt	mi
 8001e48:	6833      	ldrmi	r3, [r6, #0]
 8001e4a:	3302      	addmi	r3, #2
 8001e4c:	6033      	strmi	r3, [r6, #0]
 8001e4e:	6825      	ldr	r5, [r4, #0]
 8001e50:	f015 0506 	ands.w	r5, r5, #6
 8001e54:	d106      	bne.n	8001e64 <_printf_common+0x48>
 8001e56:	f104 0a19 	add.w	sl, r4, #25
 8001e5a:	68e3      	ldr	r3, [r4, #12]
 8001e5c:	6832      	ldr	r2, [r6, #0]
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	42ab      	cmp	r3, r5
 8001e62:	dc2b      	bgt.n	8001ebc <_printf_common+0xa0>
 8001e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e68:	1e13      	subs	r3, r2, #0
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	bf18      	it	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	0692      	lsls	r2, r2, #26
 8001e72:	d430      	bmi.n	8001ed6 <_printf_common+0xba>
 8001e74:	4649      	mov	r1, r9
 8001e76:	4638      	mov	r0, r7
 8001e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e7c:	47c0      	blx	r8
 8001e7e:	3001      	adds	r0, #1
 8001e80:	d023      	beq.n	8001eca <_printf_common+0xae>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	6922      	ldr	r2, [r4, #16]
 8001e86:	f003 0306 	and.w	r3, r3, #6
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf14      	ite	ne
 8001e8e:	2500      	movne	r5, #0
 8001e90:	6833      	ldreq	r3, [r6, #0]
 8001e92:	f04f 0600 	mov.w	r6, #0
 8001e96:	bf08      	it	eq
 8001e98:	68e5      	ldreq	r5, [r4, #12]
 8001e9a:	f104 041a 	add.w	r4, r4, #26
 8001e9e:	bf08      	it	eq
 8001ea0:	1aed      	subeq	r5, r5, r3
 8001ea2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001ea6:	bf08      	it	eq
 8001ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bfc4      	itt	gt
 8001eb0:	1a9b      	subgt	r3, r3, r2
 8001eb2:	18ed      	addgt	r5, r5, r3
 8001eb4:	42b5      	cmp	r5, r6
 8001eb6:	d11a      	bne.n	8001eee <_printf_common+0xd2>
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e008      	b.n	8001ece <_printf_common+0xb2>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4652      	mov	r2, sl
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	4638      	mov	r0, r7
 8001ec4:	47c0      	blx	r8
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	d103      	bne.n	8001ed2 <_printf_common+0xb6>
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed2:	3501      	adds	r5, #1
 8001ed4:	e7c1      	b.n	8001e5a <_printf_common+0x3e>
 8001ed6:	2030      	movs	r0, #48	; 0x30
 8001ed8:	18e1      	adds	r1, r4, r3
 8001eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ee4:	4422      	add	r2, r4
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001eec:	e7c2      	b.n	8001e74 <_printf_common+0x58>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4622      	mov	r2, r4
 8001ef2:	4649      	mov	r1, r9
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	47c0      	blx	r8
 8001ef8:	3001      	adds	r0, #1
 8001efa:	d0e6      	beq.n	8001eca <_printf_common+0xae>
 8001efc:	3601      	adds	r6, #1
 8001efe:	e7d9      	b.n	8001eb4 <_printf_common+0x98>

08001f00 <_printf_i>:
 8001f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f04:	7e0f      	ldrb	r7, [r1, #24]
 8001f06:	4691      	mov	r9, r2
 8001f08:	2f78      	cmp	r7, #120	; 0x78
 8001f0a:	4680      	mov	r8, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	469a      	mov	sl, r3
 8001f10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f16:	d807      	bhi.n	8001f28 <_printf_i+0x28>
 8001f18:	2f62      	cmp	r7, #98	; 0x62
 8001f1a:	d80a      	bhi.n	8001f32 <_printf_i+0x32>
 8001f1c:	2f00      	cmp	r7, #0
 8001f1e:	f000 80d5 	beq.w	80020cc <_printf_i+0x1cc>
 8001f22:	2f58      	cmp	r7, #88	; 0x58
 8001f24:	f000 80c1 	beq.w	80020aa <_printf_i+0x1aa>
 8001f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f30:	e03a      	b.n	8001fa8 <_printf_i+0xa8>
 8001f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f36:	2b15      	cmp	r3, #21
 8001f38:	d8f6      	bhi.n	8001f28 <_printf_i+0x28>
 8001f3a:	a101      	add	r1, pc, #4	; (adr r1, 8001f40 <_printf_i+0x40>)
 8001f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f40:	08001f99 	.word	0x08001f99
 8001f44:	08001fad 	.word	0x08001fad
 8001f48:	08001f29 	.word	0x08001f29
 8001f4c:	08001f29 	.word	0x08001f29
 8001f50:	08001f29 	.word	0x08001f29
 8001f54:	08001f29 	.word	0x08001f29
 8001f58:	08001fad 	.word	0x08001fad
 8001f5c:	08001f29 	.word	0x08001f29
 8001f60:	08001f29 	.word	0x08001f29
 8001f64:	08001f29 	.word	0x08001f29
 8001f68:	08001f29 	.word	0x08001f29
 8001f6c:	080020b3 	.word	0x080020b3
 8001f70:	08001fd9 	.word	0x08001fd9
 8001f74:	0800206d 	.word	0x0800206d
 8001f78:	08001f29 	.word	0x08001f29
 8001f7c:	08001f29 	.word	0x08001f29
 8001f80:	080020d5 	.word	0x080020d5
 8001f84:	08001f29 	.word	0x08001f29
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001f29 	.word	0x08001f29
 8001f90:	08001f29 	.word	0x08001f29
 8001f94:	08002075 	.word	0x08002075
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	1d1a      	adds	r2, r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	602a      	str	r2, [r5, #0]
 8001fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0a0      	b.n	80020ee <_printf_i+0x1ee>
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	0607      	lsls	r7, r0, #24
 8001fb2:	f103 0104 	add.w	r1, r3, #4
 8001fb6:	6029      	str	r1, [r5, #0]
 8001fb8:	d501      	bpl.n	8001fbe <_printf_i+0xbe>
 8001fba:	681e      	ldr	r6, [r3, #0]
 8001fbc:	e003      	b.n	8001fc6 <_printf_i+0xc6>
 8001fbe:	0646      	lsls	r6, r0, #25
 8001fc0:	d5fb      	bpl.n	8001fba <_printf_i+0xba>
 8001fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	da03      	bge.n	8001fd2 <_printf_i+0xd2>
 8001fca:	232d      	movs	r3, #45	; 0x2d
 8001fcc:	4276      	negs	r6, r6
 8001fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	4859      	ldr	r0, [pc, #356]	; (800213c <_printf_i+0x23c>)
 8001fd6:	e012      	b.n	8001ffe <_printf_i+0xfe>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6820      	ldr	r0, [r4, #0]
 8001fdc:	1d19      	adds	r1, r3, #4
 8001fde:	6029      	str	r1, [r5, #0]
 8001fe0:	0605      	lsls	r5, r0, #24
 8001fe2:	d501      	bpl.n	8001fe8 <_printf_i+0xe8>
 8001fe4:	681e      	ldr	r6, [r3, #0]
 8001fe6:	e002      	b.n	8001fee <_printf_i+0xee>
 8001fe8:	0641      	lsls	r1, r0, #25
 8001fea:	d5fb      	bpl.n	8001fe4 <_printf_i+0xe4>
 8001fec:	881e      	ldrh	r6, [r3, #0]
 8001fee:	2f6f      	cmp	r7, #111	; 0x6f
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2308      	moveq	r3, #8
 8001ff4:	230a      	movne	r3, #10
 8001ff6:	4851      	ldr	r0, [pc, #324]	; (800213c <_printf_i+0x23c>)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ffe:	6865      	ldr	r5, [r4, #4]
 8002000:	2d00      	cmp	r5, #0
 8002002:	bfa8      	it	ge
 8002004:	6821      	ldrge	r1, [r4, #0]
 8002006:	60a5      	str	r5, [r4, #8]
 8002008:	bfa4      	itt	ge
 800200a:	f021 0104 	bicge.w	r1, r1, #4
 800200e:	6021      	strge	r1, [r4, #0]
 8002010:	b90e      	cbnz	r6, 8002016 <_printf_i+0x116>
 8002012:	2d00      	cmp	r5, #0
 8002014:	d04b      	beq.n	80020ae <_printf_i+0x1ae>
 8002016:	4615      	mov	r5, r2
 8002018:	fbb6 f1f3 	udiv	r1, r6, r3
 800201c:	fb03 6711 	mls	r7, r3, r1, r6
 8002020:	5dc7      	ldrb	r7, [r0, r7]
 8002022:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002026:	4637      	mov	r7, r6
 8002028:	42bb      	cmp	r3, r7
 800202a:	460e      	mov	r6, r1
 800202c:	d9f4      	bls.n	8002018 <_printf_i+0x118>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d10b      	bne.n	800204a <_printf_i+0x14a>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	07de      	lsls	r6, r3, #31
 8002036:	d508      	bpl.n	800204a <_printf_i+0x14a>
 8002038:	6923      	ldr	r3, [r4, #16]
 800203a:	6861      	ldr	r1, [r4, #4]
 800203c:	4299      	cmp	r1, r3
 800203e:	bfde      	ittt	le
 8002040:	2330      	movle	r3, #48	; 0x30
 8002042:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002046:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800204a:	1b52      	subs	r2, r2, r5
 800204c:	6122      	str	r2, [r4, #16]
 800204e:	464b      	mov	r3, r9
 8002050:	4621      	mov	r1, r4
 8002052:	4640      	mov	r0, r8
 8002054:	f8cd a000 	str.w	sl, [sp]
 8002058:	aa03      	add	r2, sp, #12
 800205a:	f7ff fedf 	bl	8001e1c <_printf_common>
 800205e:	3001      	adds	r0, #1
 8002060:	d14a      	bne.n	80020f8 <_printf_i+0x1f8>
 8002062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002066:	b004      	add	sp, #16
 8002068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	6023      	str	r3, [r4, #0]
 8002074:	2778      	movs	r7, #120	; 0x78
 8002076:	4832      	ldr	r0, [pc, #200]	; (8002140 <_printf_i+0x240>)
 8002078:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	6829      	ldr	r1, [r5, #0]
 8002080:	061f      	lsls	r7, r3, #24
 8002082:	f851 6b04 	ldr.w	r6, [r1], #4
 8002086:	d402      	bmi.n	800208e <_printf_i+0x18e>
 8002088:	065f      	lsls	r7, r3, #25
 800208a:	bf48      	it	mi
 800208c:	b2b6      	uxthmi	r6, r6
 800208e:	07df      	lsls	r7, r3, #31
 8002090:	bf48      	it	mi
 8002092:	f043 0320 	orrmi.w	r3, r3, #32
 8002096:	6029      	str	r1, [r5, #0]
 8002098:	bf48      	it	mi
 800209a:	6023      	strmi	r3, [r4, #0]
 800209c:	b91e      	cbnz	r6, 80020a6 <_printf_i+0x1a6>
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f023 0320 	bic.w	r3, r3, #32
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	2310      	movs	r3, #16
 80020a8:	e7a6      	b.n	8001ff8 <_printf_i+0xf8>
 80020aa:	4824      	ldr	r0, [pc, #144]	; (800213c <_printf_i+0x23c>)
 80020ac:	e7e4      	b.n	8002078 <_printf_i+0x178>
 80020ae:	4615      	mov	r5, r2
 80020b0:	e7bd      	b.n	800202e <_printf_i+0x12e>
 80020b2:	682b      	ldr	r3, [r5, #0]
 80020b4:	6826      	ldr	r6, [r4, #0]
 80020b6:	1d18      	adds	r0, r3, #4
 80020b8:	6961      	ldr	r1, [r4, #20]
 80020ba:	6028      	str	r0, [r5, #0]
 80020bc:	0635      	lsls	r5, r6, #24
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	d501      	bpl.n	80020c6 <_printf_i+0x1c6>
 80020c2:	6019      	str	r1, [r3, #0]
 80020c4:	e002      	b.n	80020cc <_printf_i+0x1cc>
 80020c6:	0670      	lsls	r0, r6, #25
 80020c8:	d5fb      	bpl.n	80020c2 <_printf_i+0x1c2>
 80020ca:	8019      	strh	r1, [r3, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	4615      	mov	r5, r2
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	e7bc      	b.n	800204e <_printf_i+0x14e>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	2100      	movs	r1, #0
 80020d8:	1d1a      	adds	r2, r3, #4
 80020da:	602a      	str	r2, [r5, #0]
 80020dc:	681d      	ldr	r5, [r3, #0]
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	4628      	mov	r0, r5
 80020e2:	f000 f97f 	bl	80023e4 <memchr>
 80020e6:	b108      	cbz	r0, 80020ec <_printf_i+0x1ec>
 80020e8:	1b40      	subs	r0, r0, r5
 80020ea:	6060      	str	r0, [r4, #4]
 80020ec:	6863      	ldr	r3, [r4, #4]
 80020ee:	6123      	str	r3, [r4, #16]
 80020f0:	2300      	movs	r3, #0
 80020f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f6:	e7aa      	b.n	800204e <_printf_i+0x14e>
 80020f8:	462a      	mov	r2, r5
 80020fa:	4649      	mov	r1, r9
 80020fc:	4640      	mov	r0, r8
 80020fe:	6923      	ldr	r3, [r4, #16]
 8002100:	47d0      	blx	sl
 8002102:	3001      	adds	r0, #1
 8002104:	d0ad      	beq.n	8002062 <_printf_i+0x162>
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	079b      	lsls	r3, r3, #30
 800210a:	d413      	bmi.n	8002134 <_printf_i+0x234>
 800210c:	68e0      	ldr	r0, [r4, #12]
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	4298      	cmp	r0, r3
 8002112:	bfb8      	it	lt
 8002114:	4618      	movlt	r0, r3
 8002116:	e7a6      	b.n	8002066 <_printf_i+0x166>
 8002118:	2301      	movs	r3, #1
 800211a:	4632      	mov	r2, r6
 800211c:	4649      	mov	r1, r9
 800211e:	4640      	mov	r0, r8
 8002120:	47d0      	blx	sl
 8002122:	3001      	adds	r0, #1
 8002124:	d09d      	beq.n	8002062 <_printf_i+0x162>
 8002126:	3501      	adds	r5, #1
 8002128:	68e3      	ldr	r3, [r4, #12]
 800212a:	9903      	ldr	r1, [sp, #12]
 800212c:	1a5b      	subs	r3, r3, r1
 800212e:	42ab      	cmp	r3, r5
 8002130:	dcf2      	bgt.n	8002118 <_printf_i+0x218>
 8002132:	e7eb      	b.n	800210c <_printf_i+0x20c>
 8002134:	2500      	movs	r5, #0
 8002136:	f104 0619 	add.w	r6, r4, #25
 800213a:	e7f5      	b.n	8002128 <_printf_i+0x228>
 800213c:	0800257b 	.word	0x0800257b
 8002140:	0800258c 	.word	0x0800258c

08002144 <__sflush_r>:
 8002144:	898a      	ldrh	r2, [r1, #12]
 8002146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002148:	4605      	mov	r5, r0
 800214a:	0710      	lsls	r0, r2, #28
 800214c:	460c      	mov	r4, r1
 800214e:	d457      	bmi.n	8002200 <__sflush_r+0xbc>
 8002150:	684b      	ldr	r3, [r1, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	dc04      	bgt.n	8002160 <__sflush_r+0x1c>
 8002156:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	dc01      	bgt.n	8002160 <__sflush_r+0x1c>
 800215c:	2000      	movs	r0, #0
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002162:	2e00      	cmp	r6, #0
 8002164:	d0fa      	beq.n	800215c <__sflush_r+0x18>
 8002166:	2300      	movs	r3, #0
 8002168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800216c:	682f      	ldr	r7, [r5, #0]
 800216e:	6a21      	ldr	r1, [r4, #32]
 8002170:	602b      	str	r3, [r5, #0]
 8002172:	d032      	beq.n	80021da <__sflush_r+0x96>
 8002174:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002176:	89a3      	ldrh	r3, [r4, #12]
 8002178:	075a      	lsls	r2, r3, #29
 800217a:	d505      	bpl.n	8002188 <__sflush_r+0x44>
 800217c:	6863      	ldr	r3, [r4, #4]
 800217e:	1ac0      	subs	r0, r0, r3
 8002180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002182:	b10b      	cbz	r3, 8002188 <__sflush_r+0x44>
 8002184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002186:	1ac0      	subs	r0, r0, r3
 8002188:	2300      	movs	r3, #0
 800218a:	4602      	mov	r2, r0
 800218c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800218e:	4628      	mov	r0, r5
 8002190:	6a21      	ldr	r1, [r4, #32]
 8002192:	47b0      	blx	r6
 8002194:	1c43      	adds	r3, r0, #1
 8002196:	89a3      	ldrh	r3, [r4, #12]
 8002198:	d106      	bne.n	80021a8 <__sflush_r+0x64>
 800219a:	6829      	ldr	r1, [r5, #0]
 800219c:	291d      	cmp	r1, #29
 800219e:	d82b      	bhi.n	80021f8 <__sflush_r+0xb4>
 80021a0:	4a28      	ldr	r2, [pc, #160]	; (8002244 <__sflush_r+0x100>)
 80021a2:	410a      	asrs	r2, r1
 80021a4:	07d6      	lsls	r6, r2, #31
 80021a6:	d427      	bmi.n	80021f8 <__sflush_r+0xb4>
 80021a8:	2200      	movs	r2, #0
 80021aa:	6062      	str	r2, [r4, #4]
 80021ac:	6922      	ldr	r2, [r4, #16]
 80021ae:	04d9      	lsls	r1, r3, #19
 80021b0:	6022      	str	r2, [r4, #0]
 80021b2:	d504      	bpl.n	80021be <__sflush_r+0x7a>
 80021b4:	1c42      	adds	r2, r0, #1
 80021b6:	d101      	bne.n	80021bc <__sflush_r+0x78>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	b903      	cbnz	r3, 80021be <__sflush_r+0x7a>
 80021bc:	6560      	str	r0, [r4, #84]	; 0x54
 80021be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021c0:	602f      	str	r7, [r5, #0]
 80021c2:	2900      	cmp	r1, #0
 80021c4:	d0ca      	beq.n	800215c <__sflush_r+0x18>
 80021c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021ca:	4299      	cmp	r1, r3
 80021cc:	d002      	beq.n	80021d4 <__sflush_r+0x90>
 80021ce:	4628      	mov	r0, r5
 80021d0:	f7ff fbee 	bl	80019b0 <_free_r>
 80021d4:	2000      	movs	r0, #0
 80021d6:	6360      	str	r0, [r4, #52]	; 0x34
 80021d8:	e7c1      	b.n	800215e <__sflush_r+0x1a>
 80021da:	2301      	movs	r3, #1
 80021dc:	4628      	mov	r0, r5
 80021de:	47b0      	blx	r6
 80021e0:	1c41      	adds	r1, r0, #1
 80021e2:	d1c8      	bne.n	8002176 <__sflush_r+0x32>
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0c5      	beq.n	8002176 <__sflush_r+0x32>
 80021ea:	2b1d      	cmp	r3, #29
 80021ec:	d001      	beq.n	80021f2 <__sflush_r+0xae>
 80021ee:	2b16      	cmp	r3, #22
 80021f0:	d101      	bne.n	80021f6 <__sflush_r+0xb2>
 80021f2:	602f      	str	r7, [r5, #0]
 80021f4:	e7b2      	b.n	800215c <__sflush_r+0x18>
 80021f6:	89a3      	ldrh	r3, [r4, #12]
 80021f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021fc:	81a3      	strh	r3, [r4, #12]
 80021fe:	e7ae      	b.n	800215e <__sflush_r+0x1a>
 8002200:	690f      	ldr	r7, [r1, #16]
 8002202:	2f00      	cmp	r7, #0
 8002204:	d0aa      	beq.n	800215c <__sflush_r+0x18>
 8002206:	0793      	lsls	r3, r2, #30
 8002208:	bf18      	it	ne
 800220a:	2300      	movne	r3, #0
 800220c:	680e      	ldr	r6, [r1, #0]
 800220e:	bf08      	it	eq
 8002210:	694b      	ldreq	r3, [r1, #20]
 8002212:	1bf6      	subs	r6, r6, r7
 8002214:	600f      	str	r7, [r1, #0]
 8002216:	608b      	str	r3, [r1, #8]
 8002218:	2e00      	cmp	r6, #0
 800221a:	dd9f      	ble.n	800215c <__sflush_r+0x18>
 800221c:	4633      	mov	r3, r6
 800221e:	463a      	mov	r2, r7
 8002220:	4628      	mov	r0, r5
 8002222:	6a21      	ldr	r1, [r4, #32]
 8002224:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002228:	47e0      	blx	ip
 800222a:	2800      	cmp	r0, #0
 800222c:	dc06      	bgt.n	800223c <__sflush_r+0xf8>
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002238:	81a3      	strh	r3, [r4, #12]
 800223a:	e790      	b.n	800215e <__sflush_r+0x1a>
 800223c:	4407      	add	r7, r0
 800223e:	1a36      	subs	r6, r6, r0
 8002240:	e7ea      	b.n	8002218 <__sflush_r+0xd4>
 8002242:	bf00      	nop
 8002244:	dfbffffe 	.word	0xdfbffffe

08002248 <_fflush_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	690b      	ldr	r3, [r1, #16]
 800224c:	4605      	mov	r5, r0
 800224e:	460c      	mov	r4, r1
 8002250:	b913      	cbnz	r3, 8002258 <_fflush_r+0x10>
 8002252:	2500      	movs	r5, #0
 8002254:	4628      	mov	r0, r5
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	b118      	cbz	r0, 8002262 <_fflush_r+0x1a>
 800225a:	6a03      	ldr	r3, [r0, #32]
 800225c:	b90b      	cbnz	r3, 8002262 <_fflush_r+0x1a>
 800225e:	f7ff faa1 	bl	80017a4 <__sinit>
 8002262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f3      	beq.n	8002252 <_fflush_r+0xa>
 800226a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800226c:	07d0      	lsls	r0, r2, #31
 800226e:	d404      	bmi.n	800227a <_fflush_r+0x32>
 8002270:	0599      	lsls	r1, r3, #22
 8002272:	d402      	bmi.n	800227a <_fflush_r+0x32>
 8002274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002276:	f7ff fb99 	bl	80019ac <__retarget_lock_acquire_recursive>
 800227a:	4628      	mov	r0, r5
 800227c:	4621      	mov	r1, r4
 800227e:	f7ff ff61 	bl	8002144 <__sflush_r>
 8002282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002284:	4605      	mov	r5, r0
 8002286:	07da      	lsls	r2, r3, #31
 8002288:	d4e4      	bmi.n	8002254 <_fflush_r+0xc>
 800228a:	89a3      	ldrh	r3, [r4, #12]
 800228c:	059b      	lsls	r3, r3, #22
 800228e:	d4e1      	bmi.n	8002254 <_fflush_r+0xc>
 8002290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002292:	f7ff fb8c 	bl	80019ae <__retarget_lock_release_recursive>
 8002296:	e7dd      	b.n	8002254 <_fflush_r+0xc>

08002298 <__swbuf_r>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	460e      	mov	r6, r1
 800229c:	4614      	mov	r4, r2
 800229e:	4605      	mov	r5, r0
 80022a0:	b118      	cbz	r0, 80022aa <__swbuf_r+0x12>
 80022a2:	6a03      	ldr	r3, [r0, #32]
 80022a4:	b90b      	cbnz	r3, 80022aa <__swbuf_r+0x12>
 80022a6:	f7ff fa7d 	bl	80017a4 <__sinit>
 80022aa:	69a3      	ldr	r3, [r4, #24]
 80022ac:	60a3      	str	r3, [r4, #8]
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	071a      	lsls	r2, r3, #28
 80022b2:	d525      	bpl.n	8002300 <__swbuf_r+0x68>
 80022b4:	6923      	ldr	r3, [r4, #16]
 80022b6:	b31b      	cbz	r3, 8002300 <__swbuf_r+0x68>
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	6922      	ldr	r2, [r4, #16]
 80022bc:	b2f6      	uxtb	r6, r6
 80022be:	1a98      	subs	r0, r3, r2
 80022c0:	6963      	ldr	r3, [r4, #20]
 80022c2:	4637      	mov	r7, r6
 80022c4:	4283      	cmp	r3, r0
 80022c6:	dc04      	bgt.n	80022d2 <__swbuf_r+0x3a>
 80022c8:	4621      	mov	r1, r4
 80022ca:	4628      	mov	r0, r5
 80022cc:	f7ff ffbc 	bl	8002248 <_fflush_r>
 80022d0:	b9e0      	cbnz	r0, 800230c <__swbuf_r+0x74>
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	6022      	str	r2, [r4, #0]
 80022de:	701e      	strb	r6, [r3, #0]
 80022e0:	6962      	ldr	r2, [r4, #20]
 80022e2:	1c43      	adds	r3, r0, #1
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d004      	beq.n	80022f2 <__swbuf_r+0x5a>
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	07db      	lsls	r3, r3, #31
 80022ec:	d506      	bpl.n	80022fc <__swbuf_r+0x64>
 80022ee:	2e0a      	cmp	r6, #10
 80022f0:	d104      	bne.n	80022fc <__swbuf_r+0x64>
 80022f2:	4621      	mov	r1, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f7ff ffa7 	bl	8002248 <_fflush_r>
 80022fa:	b938      	cbnz	r0, 800230c <__swbuf_r+0x74>
 80022fc:	4638      	mov	r0, r7
 80022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002300:	4621      	mov	r1, r4
 8002302:	4628      	mov	r0, r5
 8002304:	f000 f806 	bl	8002314 <__swsetup_r>
 8002308:	2800      	cmp	r0, #0
 800230a:	d0d5      	beq.n	80022b8 <__swbuf_r+0x20>
 800230c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002310:	e7f4      	b.n	80022fc <__swbuf_r+0x64>
	...

08002314 <__swsetup_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <__swsetup_r+0xac>)
 8002318:	4605      	mov	r5, r0
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	460c      	mov	r4, r1
 800231e:	b118      	cbz	r0, 8002328 <__swsetup_r+0x14>
 8002320:	6a03      	ldr	r3, [r0, #32]
 8002322:	b90b      	cbnz	r3, 8002328 <__swsetup_r+0x14>
 8002324:	f7ff fa3e 	bl	80017a4 <__sinit>
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800232e:	0718      	lsls	r0, r3, #28
 8002330:	d422      	bmi.n	8002378 <__swsetup_r+0x64>
 8002332:	06d9      	lsls	r1, r3, #27
 8002334:	d407      	bmi.n	8002346 <__swsetup_r+0x32>
 8002336:	2309      	movs	r3, #9
 8002338:	602b      	str	r3, [r5, #0]
 800233a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800233e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002342:	81a3      	strh	r3, [r4, #12]
 8002344:	e034      	b.n	80023b0 <__swsetup_r+0x9c>
 8002346:	0758      	lsls	r0, r3, #29
 8002348:	d512      	bpl.n	8002370 <__swsetup_r+0x5c>
 800234a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800234c:	b141      	cbz	r1, 8002360 <__swsetup_r+0x4c>
 800234e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002352:	4299      	cmp	r1, r3
 8002354:	d002      	beq.n	800235c <__swsetup_r+0x48>
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff fb2a 	bl	80019b0 <_free_r>
 800235c:	2300      	movs	r3, #0
 800235e:	6363      	str	r3, [r4, #52]	; 0x34
 8002360:	89a3      	ldrh	r3, [r4, #12]
 8002362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	2300      	movs	r3, #0
 800236a:	6063      	str	r3, [r4, #4]
 800236c:	6923      	ldr	r3, [r4, #16]
 800236e:	6023      	str	r3, [r4, #0]
 8002370:	89a3      	ldrh	r3, [r4, #12]
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	81a3      	strh	r3, [r4, #12]
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	b94b      	cbnz	r3, 8002390 <__swsetup_r+0x7c>
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002386:	d003      	beq.n	8002390 <__swsetup_r+0x7c>
 8002388:	4621      	mov	r1, r4
 800238a:	4628      	mov	r0, r5
 800238c:	f000 f85d 	bl	800244a <__smakebuf_r>
 8002390:	89a0      	ldrh	r0, [r4, #12]
 8002392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002396:	f010 0301 	ands.w	r3, r0, #1
 800239a:	d00a      	beq.n	80023b2 <__swsetup_r+0x9e>
 800239c:	2300      	movs	r3, #0
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	6963      	ldr	r3, [r4, #20]
 80023a2:	425b      	negs	r3, r3
 80023a4:	61a3      	str	r3, [r4, #24]
 80023a6:	6923      	ldr	r3, [r4, #16]
 80023a8:	b943      	cbnz	r3, 80023bc <__swsetup_r+0xa8>
 80023aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023ae:	d1c4      	bne.n	800233a <__swsetup_r+0x26>
 80023b0:	bd38      	pop	{r3, r4, r5, pc}
 80023b2:	0781      	lsls	r1, r0, #30
 80023b4:	bf58      	it	pl
 80023b6:	6963      	ldrpl	r3, [r4, #20]
 80023b8:	60a3      	str	r3, [r4, #8]
 80023ba:	e7f4      	b.n	80023a6 <__swsetup_r+0x92>
 80023bc:	2000      	movs	r0, #0
 80023be:	e7f7      	b.n	80023b0 <__swsetup_r+0x9c>
 80023c0:	20000068 	.word	0x20000068

080023c4 <_sbrk_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	2300      	movs	r3, #0
 80023c8:	4d05      	ldr	r5, [pc, #20]	; (80023e0 <_sbrk_r+0x1c>)
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	602b      	str	r3, [r5, #0]
 80023d0:	f7fe f8fe 	bl	80005d0 <_sbrk>
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d102      	bne.n	80023de <_sbrk_r+0x1a>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	b103      	cbz	r3, 80023de <_sbrk_r+0x1a>
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	2000025c 	.word	0x2000025c

080023e4 <memchr>:
 80023e4:	4603      	mov	r3, r0
 80023e6:	b510      	push	{r4, lr}
 80023e8:	b2c9      	uxtb	r1, r1
 80023ea:	4402      	add	r2, r0
 80023ec:	4293      	cmp	r3, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	d101      	bne.n	80023f6 <memchr+0x12>
 80023f2:	2000      	movs	r0, #0
 80023f4:	e003      	b.n	80023fe <memchr+0x1a>
 80023f6:	7804      	ldrb	r4, [r0, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	428c      	cmp	r4, r1
 80023fc:	d1f6      	bne.n	80023ec <memchr+0x8>
 80023fe:	bd10      	pop	{r4, pc}

08002400 <__swhatbuf_r>:
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	460c      	mov	r4, r1
 8002404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002408:	4615      	mov	r5, r2
 800240a:	2900      	cmp	r1, #0
 800240c:	461e      	mov	r6, r3
 800240e:	b096      	sub	sp, #88	; 0x58
 8002410:	da0c      	bge.n	800242c <__swhatbuf_r+0x2c>
 8002412:	89a3      	ldrh	r3, [r4, #12]
 8002414:	2100      	movs	r1, #0
 8002416:	f013 0f80 	tst.w	r3, #128	; 0x80
 800241a:	bf0c      	ite	eq
 800241c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002420:	2340      	movne	r3, #64	; 0x40
 8002422:	2000      	movs	r0, #0
 8002424:	6031      	str	r1, [r6, #0]
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	b016      	add	sp, #88	; 0x58
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	466a      	mov	r2, sp
 800242e:	f000 f849 	bl	80024c4 <_fstat_r>
 8002432:	2800      	cmp	r0, #0
 8002434:	dbed      	blt.n	8002412 <__swhatbuf_r+0x12>
 8002436:	9901      	ldr	r1, [sp, #4]
 8002438:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800243c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002440:	4259      	negs	r1, r3
 8002442:	4159      	adcs	r1, r3
 8002444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002448:	e7eb      	b.n	8002422 <__swhatbuf_r+0x22>

0800244a <__smakebuf_r>:
 800244a:	898b      	ldrh	r3, [r1, #12]
 800244c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800244e:	079d      	lsls	r5, r3, #30
 8002450:	4606      	mov	r6, r0
 8002452:	460c      	mov	r4, r1
 8002454:	d507      	bpl.n	8002466 <__smakebuf_r+0x1c>
 8002456:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	6123      	str	r3, [r4, #16]
 800245e:	2301      	movs	r3, #1
 8002460:	6163      	str	r3, [r4, #20]
 8002462:	b002      	add	sp, #8
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	466a      	mov	r2, sp
 8002468:	ab01      	add	r3, sp, #4
 800246a:	f7ff ffc9 	bl	8002400 <__swhatbuf_r>
 800246e:	9900      	ldr	r1, [sp, #0]
 8002470:	4605      	mov	r5, r0
 8002472:	4630      	mov	r0, r6
 8002474:	f7ff fb04 	bl	8001a80 <_malloc_r>
 8002478:	b948      	cbnz	r0, 800248e <__smakebuf_r+0x44>
 800247a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800247e:	059a      	lsls	r2, r3, #22
 8002480:	d4ef      	bmi.n	8002462 <__smakebuf_r+0x18>
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	81a3      	strh	r3, [r4, #12]
 800248c:	e7e3      	b.n	8002456 <__smakebuf_r+0xc>
 800248e:	89a3      	ldrh	r3, [r4, #12]
 8002490:	6020      	str	r0, [r4, #0]
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	81a3      	strh	r3, [r4, #12]
 8002498:	9b00      	ldr	r3, [sp, #0]
 800249a:	6120      	str	r0, [r4, #16]
 800249c:	6163      	str	r3, [r4, #20]
 800249e:	9b01      	ldr	r3, [sp, #4]
 80024a0:	b15b      	cbz	r3, 80024ba <__smakebuf_r+0x70>
 80024a2:	4630      	mov	r0, r6
 80024a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024a8:	f000 f81e 	bl	80024e8 <_isatty_r>
 80024ac:	b128      	cbz	r0, 80024ba <__smakebuf_r+0x70>
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	f023 0303 	bic.w	r3, r3, #3
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	81a3      	strh	r3, [r4, #12]
 80024ba:	89a3      	ldrh	r3, [r4, #12]
 80024bc:	431d      	orrs	r5, r3
 80024be:	81a5      	strh	r5, [r4, #12]
 80024c0:	e7cf      	b.n	8002462 <__smakebuf_r+0x18>
	...

080024c4 <_fstat_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	2300      	movs	r3, #0
 80024c8:	4d06      	ldr	r5, [pc, #24]	; (80024e4 <_fstat_r+0x20>)
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	602b      	str	r3, [r5, #0]
 80024d2:	f7fe f858 	bl	8000586 <_fstat>
 80024d6:	1c43      	adds	r3, r0, #1
 80024d8:	d102      	bne.n	80024e0 <_fstat_r+0x1c>
 80024da:	682b      	ldr	r3, [r5, #0]
 80024dc:	b103      	cbz	r3, 80024e0 <_fstat_r+0x1c>
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
 80024e2:	bf00      	nop
 80024e4:	2000025c 	.word	0x2000025c

080024e8 <_isatty_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	2300      	movs	r3, #0
 80024ec:	4d05      	ldr	r5, [pc, #20]	; (8002504 <_isatty_r+0x1c>)
 80024ee:	4604      	mov	r4, r0
 80024f0:	4608      	mov	r0, r1
 80024f2:	602b      	str	r3, [r5, #0]
 80024f4:	f7fe f856 	bl	80005a4 <_isatty>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d102      	bne.n	8002502 <_isatty_r+0x1a>
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	b103      	cbz	r3, 8002502 <_isatty_r+0x1a>
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	2000025c 	.word	0x2000025c

08002508 <_init>:
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	bf00      	nop
 800250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250e:	bc08      	pop	{r3}
 8002510:	469e      	mov	lr, r3
 8002512:	4770      	bx	lr

08002514 <_fini>:
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	bf00      	nop
 8002518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251a:	bc08      	pop	{r3}
 800251c:	469e      	mov	lr, r3
 800251e:	4770      	bx	lr
